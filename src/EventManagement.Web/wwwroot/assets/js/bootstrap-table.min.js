/*
* bootstrap-table - v1.12.1 - 2018-03-12
* https://github.com/wenzhixin/bootstrap-table
* Copyright (c) 2018 zhixin wen
* Licensed MIT License
*/
!function(a){"use strict";var b=3;try{b=parseInt(a.fn.dropdown.Constructor.VERSION,10)}catch(c){}var d={3:{buttonsClass:"default",iconsPrefix:"glyphicon",icons:{paginationSwitchDown:"glyphicon-collapse-down icon-chevron-down",paginationSwitchUp:"glyphicon-collapse-up icon-chevron-up",refresh:"glyphicon-refresh icon-refresh",toggleOff:"glyphicon-list-alt icon-list-alt",toggleOn:"glyphicon-list-alt icon-list-alt",columns:"glyphicon-th icon-th",detailOpen:"glyphicon-plus icon-plus",detailClose:"glyphicon-minus icon-minus",fullscreen:"glyphicon-fullscreen"},pullClass:"pull",toobarDropdowHtml:['<ul class="dropdown-menu" role="menu">',"</ul>"],toobarDropdowItemHtml:'<li role="menuitem"><label>%s</label></li>',pageDropdownHtml:['<ul class="dropdown-menu" role="menu">',"</ul>"],pageDropdownItemHtml:'<li role="menuitem" class="%s"><a href="#">%s</a></li>'},4:{buttonsClass:"secondary",iconsPrefix:"fa",icons:{paginationSwitchDown:"fa-toggle-down",paginationSwitchUp:"fa-toggle-up",refresh:"fa-refresh",toggleOff:"fa-toggle-off",toggleOn:"fa-toggle-on",columns:"fa-th-list",detailOpen:"fa-plus",detailClose:"fa-minus",fullscreen:"fa-arrows-alt"},pullClass:"float",toobarDropdowHtml:['<div class="dropdown-menu dropdown-menu-right">',"</div>"],toobarDropdowItemHtml:'<label class="dropdown-item">%s</label>',pageDropdownHtml:['<div class="dropdown-menu">',"</div>"],pageDropdownItemHtml:'<a class="dropdown-item %s" href="#">%s</a>'}}[b],e=null,f=function(a){var b=arguments,c=!0,d=1;return a=a.replace(/%s/g,function(){var a=b[d++];return"undefined"==typeof a?(c=!1,""):a}),c?a:""},g=function(b,c,d,e){var f="";return a.each(b,function(a,b){return b[c]===e?(f=b[d],!1):!0}),f},h=function(b){var c,d,e,f=0,g=[];for(c=0;c<b[0].length;c++)f+=b[0][c].colspan||1;for(c=0;c<b.length;c++)for(g[c]=[],d=0;f>d;d++)g[c][d]=!1;for(c=0;c<b.length;c++)for(d=0;d<b[c].length;d++){var h=b[c][d],i=h.rowspan||1,j=h.colspan||1,k=a.inArray(!1,g[c]);for(1===j&&(h.fieldIndex=k,"undefined"==typeof h.field&&(h.field=k)),e=0;i>e;e++)g[c+e][k]=!0;for(e=0;j>e;e++)g[c][k+e]=!0}},i=function(){if(null===e){var b,c,d=a("<p/>").addClass("fixed-table-scroll-inner"),f=a("<div/>").addClass("fixed-table-scroll-outer");f.append(d),a("body").append(f),b=d[0].offsetWidth,f.css("overflow","scroll"),c=d[0].offsetWidth,b===c&&(c=f[0].clientWidth),f.remove(),e=b-c}return e},j=function(b,c,d,e){var g=c;if("string"==typeof c){var h=c.split(".");h.length>1?(g=window,a.each(h,function(a,b){g=g[b]})):g=window[c]}return"object"==typeof g?g:"function"==typeof g?g.apply(b,d||[]):!g&&"string"==typeof c&&f.apply(this,[c].concat(d))?f.apply(this,[c].concat(d)):e},k=function(b,c,d){var e=Object.getOwnPropertyNames||function(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c);return b},f=e(b),g=e(c),h="";if(d&&f.length!==g.length)return!1;for(var i=0;i<f.length;i++)if(h=f[i],a.inArray(h,g)>-1&&b[h]!==c[h])return!1;return!0},l=function(a){return"string"==typeof a?a.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;").replace(/`/g,"&#x60;"):a},m=function(a){for(var b in a){var c=b.split(/(?=[A-Z])/).join("-").toLowerCase();c!==b&&(a[c]=a[b],delete a[b])}return a},n=function(a,b,c){var d=a;if("string"!=typeof b||a.hasOwnProperty(b))return c?l(a[b]):a[b];var e=b.split(".");for(var f in e)e.hasOwnProperty(f)&&(d=d&&d[e[f]]);return c?l(d):d},o=function(){return!!(navigator.userAgent.indexOf("MSIE ")>0||navigator.userAgent.match(/Trident.*rv\:11\./))},p=function(){Object.keys||(Object.keys=function(){var a=Object.prototype.hasOwnProperty,b=!{toString:null}.propertyIsEnumerable("toString"),c=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],d=c.length;return function(e){if("object"!=typeof e&&("function"!=typeof e||null===e))throw new TypeError("Object.keys called on non-object");var f,g,h=[];for(f in e)a.call(e,f)&&h.push(f);if(b)for(g=0;d>g;g++)a.call(e,c[g])&&h.push(c[g]);return h}}())},q=function(b,c){this.options=c,this.$el=a(b),this.$el_=this.$el.clone(),this.timeoutId_=0,this.timeoutFooter_=0,this.init()};q.DEFAULTS={classes:"table table-hover",sortClass:void 0,locale:void 0,height:void 0,undefinedText:"-",sortName:void 0,sortOrder:"asc",sortStable:!1,rememberOrder:!1,striped:!1,columns:[[]],data:[],totalField:"total",dataField:"rows",method:"get",url:void 0,ajax:void 0,cache:!0,contentType:"application/json",dataType:"json",ajaxOptions:{},queryParams:function(a){return a},queryParamsType:"limit",responseHandler:function(a){return a},pagination:!1,onlyInfoPagination:!1,paginationLoop:!0,sidePagination:"client",totalRows:0,pageNumber:1,pageSize:10,pageList:[10,25,50,100],paginationHAlign:"right",paginationVAlign:"bottom",paginationDetailHAlign:"left",paginationPreText:"&lsaquo;",paginationNextText:"&rsaquo;",search:!1,searchOnEnterKey:!1,strictSearch:!1,searchAlign:"right",selectItemName:"btSelectItem",showHeader:!0,showFooter:!1,showColumns:!1,showPaginationSwitch:!1,showRefresh:!1,showToggle:!1,showFullscreen:!1,smartDisplay:!0,escape:!1,minimumCountColumns:1,idField:void 0,uniqueId:void 0,cardView:!1,detailView:!1,detailFormatter:function(){return""},detailFilter:function(){return!0},trimOnSearch:!0,clickToSelect:!1,singleSelect:!1,toolbar:void 0,toolbarAlign:"left",buttonsToolbar:void 0,buttonsAlign:"right",checkboxHeader:!0,sortable:!0,silentSort:!0,maintainSelected:!1,searchTimeOut:500,searchText:"",iconSize:void 0,buttonsClass:d.buttonsClass,iconsPrefix:d.iconsPrefix,icons:d.icons,customSearch:a.noop,customSort:a.noop,ignoreClickToSelectOn:function(b){return a.inArray(b.tagName,["A","BUTTON"])},rowStyle:function(){return{}},rowAttributes:function(){return{}},footerStyle:function(){return{}},onAll:function(){return!1},onClickCell:function(){return!1},onDblClickCell:function(){return!1},onClickRow:function(){return!1},onDblClickRow:function(){return!1},onSort:function(){return!1},onCheck:function(){return!1},onUncheck:function(){return!1},onCheckAll:function(){return!1},onUncheckAll:function(){return!1},onCheckSome:function(){return!1},onUncheckSome:function(){return!1},onLoadSuccess:function(){return!1},onLoadError:function(){return!1},onColumnSwitch:function(){return!1},onPageChange:function(){return!1},onSearch:function(){return!1},onToggle:function(){return!1},onPreBody:function(){return!1},onPostBody:function(){return!1},onPostHeader:function(){return!1},onExpandRow:function(){return!1},onCollapseRow:function(){return!1},onRefreshOptions:function(){return!1},onRefresh:function(){return!1},onResetView:function(){return!1},onScrollBody:function(){return!1}},q.LOCALES={},q.LOCALES["en-US"]=q.LOCALES.en={formatLoadingMessage:function(){return"Loading, please wait..."},formatRecordsPerPage:function(a){return f("%s rows per page",a)},formatShowingRows:function(a,b,c){return f("Showing %s to %s of %s rows",a,b,c)},formatDetailPagination:function(a){return f("Showing %s rows",a)},formatSearch:function(){return"Search"},formatNoMatches:function(){return"No matching records found"},formatPaginationSwitch:function(){return"Hide/Show pagination"},formatRefresh:function(){return"Refresh"},formatToggle:function(){return"Toggle"},formatFullscreen:function(){return"Fullscreen"},formatColumns:function(){return"Columns"},formatAllRows:function(){return"All"}},a.extend(q.DEFAULTS,q.LOCALES["en-US"]),q.COLUMN_DEFAULTS={radio:!1,checkbox:!1,checkboxEnabled:!0,field:void 0,title:void 0,titleTooltip:void 0,"class":void 0,align:void 0,halign:void 0,falign:void 0,valign:void 0,width:void 0,sortable:!1,order:"asc",visible:!0,switchable:!0,clickToSelect:!0,formatter:void 0,footerFormatter:void 0,events:void 0,sorter:void 0,sortName:void 0,cellStyle:void 0,searchable:!0,searchFormatter:!0,cardVisible:!0,escape:!1,showSelectTitle:!1},q.EVENTS={"all.bs.table":"onAll","click-cell.bs.table":"onClickCell","dbl-click-cell.bs.table":"onDblClickCell","click-row.bs.table":"onClickRow","dbl-click-row.bs.table":"onDblClickRow","sort.bs.table":"onSort","check.bs.table":"onCheck","uncheck.bs.table":"onUncheck","check-all.bs.table":"onCheckAll","uncheck-all.bs.table":"onUncheckAll","check-some.bs.table":"onCheckSome","uncheck-some.bs.table":"onUncheckSome","load-success.bs.table":"onLoadSuccess","load-error.bs.table":"onLoadError","column-switch.bs.table":"onColumnSwitch","page-change.bs.table":"onPageChange","search.bs.table":"onSearch","toggle.bs.table":"onToggle","pre-body.bs.table":"onPreBody","post-body.bs.table":"onPostBody","post-header.bs.table":"onPostHeader","expand-row.bs.table":"onExpandRow","collapse-row.bs.table":"onCollapseRow","refresh-options.bs.table":"onRefreshOptions","reset-view.bs.table":"onResetView","refresh.bs.table":"onRefresh","scroll-body.bs.table":"onScrollBody"},q.prototype.init=function(){this.initLocale(),this.initContainer(),this.initTable(),this.initHeader(),this.initData(),this.initHiddenRows(),this.initFooter(),this.initToolbar(),this.initPagination(),this.initBody(),this.initSearchText(),this.initServer()},q.prototype.initLocale=function(){if(this.options.locale){var b=this.options.locale.split(/-|_/);b[0].toLowerCase(),b[1]&&b[1].toUpperCase(),a.fn.bootstrapTable.locales[this.options.locale]?a.extend(this.options,a.fn.bootstrapTable.locales[this.options.locale]):a.fn.bootstrapTable.locales[b.join("-")]?a.extend(this.options,a.fn.bootstrapTable.locales[b.join("-")]):a.fn.bootstrapTable.locales[b[0]]&&a.extend(this.options,a.fn.bootstrapTable.locales[b[0]])}},q.prototype.initContainer=function(){this.$container=a(['<div class="bootstrap-table">','<div class="fixed-table-toolbar"></div>',"top"===this.options.paginationVAlign||"both"===this.options.paginationVAlign?'<div class="fixed-table-pagination" style="clear: both;"></div>':"",'<div class="fixed-table-container">','<div class="fixed-table-header"><table></table></div>','<div class="fixed-table-body">','<div class="fixed-table-loading">',this.options.formatLoadingMessage(),"</div>","</div>",'<div class="fixed-table-footer"><table><tr></tr></table></div>',"</div>","bottom"===this.options.paginationVAlign||"both"===this.options.paginationVAlign?'<div class="fixed-table-pagination"></div>':"","</div>"].join("")),this.$container.insertAfter(this.$el),this.$tableContainer=this.$container.find(".fixed-table-container"),this.$tableHeader=this.$container.find(".fixed-table-header"),this.$tableBody=this.$container.find(".fixed-table-body"),this.$tableLoading=this.$container.find(".fixed-table-loading"),this.$tableFooter=this.$container.find(".fixed-table-footer"),this.$toolbar=this.options.buttonsToolbar?a("body").find(this.options.buttonsToolbar):this.$container.find(".fixed-table-toolbar"),this.$pagination=this.$container.find(".fixed-table-pagination"),this.$tableBody.append(this.$el),this.$container.after('<div class="clearfix"></div>'),this.$el.addClass(this.options.classes),this.options.striped&&this.$el.addClass("table-striped"),-1!==a.inArray("table-no-bordered",this.options.classes.split(" "))&&this.$tableContainer.addClass("table-no-bordered")},q.prototype.initTable=function(){var b=this,c=[],d=[];if(this.$header=this.$el.find(">thead"),this.$header.length||(this.$header=a("<thead></thead>").appendTo(this.$el)),this.$header.find("tr").each(function(){var b=[];a(this).find("th").each(function(){"undefined"!=typeof a(this).data("field")&&a(this).data("field",a(this).data("field")+""),b.push(a.extend({},{title:a(this).html(),"class":a(this).attr("class"),titleTooltip:a(this).attr("title"),rowspan:a(this).attr("rowspan")?+a(this).attr("rowspan"):void 0,colspan:a(this).attr("colspan")?+a(this).attr("colspan"):void 0},a(this).data()))}),c.push(b)}),a.isArray(this.options.columns[0])||(this.options.columns=[this.options.columns]),this.options.columns=a.extend(!0,[],c,this.options.columns),this.columns=[],this.fieldsColumnsIndex=[],h(this.options.columns),a.each(this.options.columns,function(c,d){a.each(d,function(d,e){e=a.extend({},q.COLUMN_DEFAULTS,e),"undefined"!=typeof e.fieldIndex&&(b.columns[e.fieldIndex]=e,b.fieldsColumnsIndex[e.field]=e.fieldIndex),b.options.columns[c][d]=e})}),!this.options.data.length){var e=[];this.$el.find(">tbody>tr").each(function(c){var f={};f._id=a(this).attr("id"),f._class=a(this).attr("class"),f._data=m(a(this).data()),a(this).find(">td").each(function(d){for(var g,h,i=a(this),j=+i.attr("colspan")||1,k=+i.attr("rowspan")||1;e[c]&&e[c][d];d++);for(g=d;d+j>g;g++)for(h=c;c+k>h;h++)e[h]||(e[h]=[]),e[h][g]=!0;var l=b.columns[d].field;f[l]=a(this).html(),f["_"+l+"_id"]=a(this).attr("id"),f["_"+l+"_class"]=a(this).attr("class"),f["_"+l+"_rowspan"]=a(this).attr("rowspan"),f["_"+l+"_colspan"]=a(this).attr("colspan"),f["_"+l+"_title"]=a(this).attr("title"),f["_"+l+"_data"]=m(a(this).data())}),d.push(f)}),this.options.data=d,d.length&&(this.fromHtml=!0)}},q.prototype.initHeader=function(){var b=this,c={},d=[];this.header={fields:[],styles:[],classes:[],formatters:[],events:[],sorters:[],sortNames:[],cellStyles:[],searchables:[]},a.each(this.options.columns,function(e,g){d.push("<tr>"),0===e&&!b.options.cardView&&b.options.detailView&&d.push(f('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>',b.options.columns.length)),a.each(g,function(a,e){var g="",h="",i="",j="",k=f(' class="%s"',e["class"]),m=(b.options.sortOrder||e.order,"px"),n=e.width;if(void 0===e.width||b.options.cardView||"string"==typeof e.width&&-1!==e.width.indexOf("%")&&(m="%"),e.width&&"string"==typeof e.width&&(n=e.width.replace("%","").replace("px","")),h=f("text-align: %s; ",e.halign?e.halign:e.align),i=f("text-align: %s; ",e.align),j=f("vertical-align: %s; ",e.valign),j+=f("width: %s; ",!e.checkbox&&!e.radio||n?n?n+m:void 0:e.showSelectTitle?void 0:"36px"),"undefined"!=typeof e.fieldIndex){if(b.header.fields[e.fieldIndex]=e.field,b.header.styles[e.fieldIndex]=i+j,b.header.classes[e.fieldIndex]=k,b.header.formatters[e.fieldIndex]=e.formatter,b.header.events[e.fieldIndex]=e.events,b.header.sorters[e.fieldIndex]=e.sorter,b.header.sortNames[e.fieldIndex]=e.sortName,b.header.cellStyles[e.fieldIndex]=e.cellStyle,b.header.searchables[e.fieldIndex]=e.searchable,!e.visible)return;if(b.options.cardView&&!e.cardVisible)return;c[e.field]=e}d.push("<th"+f(' title="%s"',e.titleTooltip),e.checkbox||e.radio?f(' class="bs-checkbox %s"',e["class"]||""):k,f(' style="%s"',h+j),f(' rowspan="%s"',e.rowspan),f(' colspan="%s"',e.colspan),f(' data-field="%s"',e.field),0===a&&e.fieldIndex?" data-not-first-th":"",">"),d.push(f('<div class="th-inner %s">',b.options.sortable&&e.sortable?"sortable both":"")),g=b.options.escape?l(e.title):e.title;var o=g;e.checkbox&&(g="",!b.options.singleSelect&&b.options.checkboxHeader&&(g='<input name="btSelectAll" type="checkbox" />'),b.header.stateField=e.field),e.radio&&(g="",b.header.stateField=e.field,b.options.singleSelect=!0),!g&&e.showSelectTitle&&(g+=o),d.push(g),d.push("</div>"),d.push('<div class="fht-cell"></div>'),d.push("</div>"),d.push("</th>")}),d.push("</tr>")}),this.$header.html(d.join("")),this.$header.find("th[data-field]").each(function(){a(this).data(c[a(this).data("field")])}),this.$container.off("click",".th-inner").on("click",".th-inner",function(c){var d=a(this);return b.options.detailView&&!d.parent().hasClass("bs-checkbox")&&d.closest(".bootstrap-table")[0]!==b.$container[0]?!1:void(b.options.sortable&&d.parent().data().sortable&&b.onSort(c))}),this.$header.children().children().off("keypress").on("keypress",function(c){if(b.options.sortable&&a(this).data().sortable){var d=c.keyCode||c.which;13==d&&b.onSort(c)}}),a(window).off("resize.bootstrap-table"),!this.options.showHeader||this.options.cardView?(this.$header.hide(),this.$tableHeader.hide(),this.$tableLoading.css("top",0)):(this.$header.show(),this.$tableHeader.show(),this.$tableLoading.css("top",this.$header.outerHeight()+1),this.getCaret(),a(window).on("resize.bootstrap-table",a.proxy(this.resetWidth,this))),this.$selectAll=this.$header.find('[name="btSelectAll"]'),this.$selectAll.off("click").on("click",function(){var c=a(this).prop("checked");b[c?"checkAll":"uncheckAll"](),b.updateSelected()})},q.prototype.initFooter=function(){!this.options.showFooter||this.options.cardView?this.$tableFooter.hide():this.$tableFooter.show()},q.prototype.initData=function(a,b){this.options.data="append"===b?this.options.data.concat(a):"prepend"===b?[].concat(a).concat(this.options.data):a||this.options.data,this.data=this.options.data,"server"!==this.options.sidePagination&&this.initSort()},q.prototype.initSort=function(){var b=this,c=this.options.sortName,d="desc"===this.options.sortOrder?-1:1,e=a.inArray(this.options.sortName,this.header.fields),g=0;return this.options.customSort!==a.noop?void this.options.customSort.apply(this,[this.options.sortName,this.options.sortOrder]):void(-1!==e&&(this.options.sortStable&&a.each(this.data,function(a,b){b._position=a}),this.data.sort(function(f,g){b.header.sortNames[e]&&(c=b.header.sortNames[e]);var h=n(f,c,b.options.escape),i=n(g,c,b.options.escape),k=j(b.header,b.header.sorters[e],[h,i,f,g]);return void 0!==k?b.options.sortStable&&0===k?f._position-g._position:d*k:((void 0===h||null===h)&&(h=""),(void 0===i||null===i)&&(i=""),b.options.sortStable&&h===i?(h=f._position,i=g._position,f._position-g._position):a.isNumeric(h)&&a.isNumeric(i)?(h=parseFloat(h),i=parseFloat(i),i>h?-1*d:d):h===i?0:("string"!=typeof h&&(h=h.toString()),-1===h.localeCompare(i)?-1*d:d))}),void 0!==this.options.sortClass&&(clearTimeout(g),g=setTimeout(function(){b.$el.removeClass(b.options.sortClass);var a=b.$header.find(f('[data-field="%s"]',b.options.sortName).index()+1);b.$el.find(f("tr td:nth-child(%s)",a)).addClass(b.options.sortClass)},250))))},q.prototype.onSort=function(b){var c="keypress"===b.type?a(b.currentTarget):a(b.currentTarget).parent(),d=this.$header.find("th").eq(c.index());return this.$header.add(this.$header_).find("span.order").remove(),this.options.sortName===c.data("field")?this.options.sortOrder="asc"===this.options.sortOrder?"desc":"asc":(this.options.sortName=c.data("field"),this.options.sortOrder=this.options.rememberOrder?"asc"===c.data("order")?"desc":"asc":this.columns[this.fieldsColumnsIndex[c.data("field")]].order),this.trigger("sort",this.options.sortName,this.options.sortOrder),c.add(d).data("order",this.options.sortOrder),this.getCaret(),"server"===this.options.sidePagination?void this.initServer(this.options.silentSort):(this.initSort(),void this.initBody())},q.prototype.initToolbar=function(){var b,c,e=this,g=[],h=0,i=0;this.$toolbar.find(".bs-bars").children().length&&a("body").append(a(this.options.toolbar)),this.$toolbar.html(""),("string"==typeof this.options.toolbar||"object"==typeof this.options.toolbar)&&a(f('<div class="bs-bars %s-%s"></div>',d.pullClass,this.options.toolbarAlign)).appendTo(this.$toolbar).append(a(this.options.toolbar)),g=[f('<div class="columns columns-%s btn-group %s-%s">',this.options.buttonsAlign,d.pullClass,this.options.buttonsAlign)],"string"==typeof this.options.icons&&(this.options.icons=j(null,this.options.icons)),this.options.showPaginationSwitch&&g.push(f('<button class="btn'+f(" btn-%s",this.options.buttonsClass)+f(" btn-%s",this.options.iconSize)+'" type="button" name="paginationSwitch" aria-label="pagination Switch" title="%s">',this.options.formatPaginationSwitch()),f('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.paginationSwitchDown),"</button>"),this.options.showFullscreen&&this.$toolbar.find('button[name="fullscreen"]').off("click").on("click",a.proxy(this.toggleFullscreen,this)),this.options.showRefresh&&g.push(f('<button class="btn'+f(" btn-%s",this.options.buttonsClass)+f(" btn-%s",this.options.iconSize)+'" type="button" name="refresh" aria-label="refresh" title="%s">',this.options.formatRefresh()),f('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.refresh),"</button>"),this.options.showToggle&&g.push(f('<button class="btn'+f(" btn-%s",this.options.buttonsClass)+f(" btn-%s",this.options.iconSize)+'" type="button" name="toggle" aria-label="toggle" title="%s">',this.options.formatToggle()),f('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.toggle),"</button>"),this.options.showFullscreen&&g.push(f('<button class="btn'+f(" btn-%s",this.options.buttonsClass)+f(" btn-%s",this.options.iconSize)+'" type="button" name="fullscreen" aria-label="fullscreen" title="%s">',this.options.formatFullscreen()),f('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.fullscreen),"</button>"),this.options.showColumns&&(g.push(f('<div class="keep-open btn-group" title="%s">',this.options.formatColumns()),'<button type="button" aria-label="columns" class="btn'+f(" btn-%s",this.options.buttonsClass)+f(" btn-%s",this.options.iconSize)+' dropdown-toggle" data-toggle="dropdown">',f('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.columns),' <span class="caret"></span>',"</button>",d.toobarDropdowHtml[0]),a.each(this.columns,function(a,b){if(!(b.radio||b.checkbox||e.options.cardView&&!b.cardVisible)){var c=b.visible?' checked="checked"':"";b.switchable&&(g.push(f(d.toobarDropdowItemHtml,f('<input type="checkbox" data-field="%s" value="%s"%s> %s',b.field,a,c,b.title))),i++)}}),g.push(d.toobarDropdowHtml[1],"</div>")),g.push("</div>"),(this.showToolbar||g.length>2)&&this.$toolbar.append(g.join("")),this.options.showPaginationSwitch&&this.$toolbar.find('button[name="paginationSwitch"]').off("click").on("click",a.proxy(this.togglePagination,this)),this.options.showRefresh&&this.$toolbar.find('button[name="refresh"]').off("click").on("click",a.proxy(this.refresh,this)),this.options.showToggle&&this.$toolbar.find('button[name="toggle"]').off("click").on("click",function(){e.toggleView()}),this.options.showColumns&&(b=this.$toolbar.find(".keep-open"),i<=this.options.minimumCountColumns&&b.find("input").prop("disabled",!0),b.find("li").off("click").on("click",function(a){a.stopImmediatePropagation()}),b.find("input").off("click").on("click",function(){var b=a(this);e.toggleColumn(a(this).val(),b.prop("checked"),!1),e.trigger("column-switch",a(this).data("field"),b.prop("checked"))})),this.options.search&&(g=[],g.push(f('<div class="%s-%s search">',d.pullClass,this.options.searchAlign),f('<input class="form-control'+f(" input-%s",this.options.iconSize)+'" type="text" placeholder="%s">',this.options.formatSearch()),"</div>"),this.$toolbar.append(g.join("")),c=this.$toolbar.find(".search input"),c.off("keyup drop blur").on("keyup drop blur",function(b){e.options.searchOnEnterKey&&13!==b.keyCode||a.inArray(b.keyCode,[37,38,39,40])>-1||(clearTimeout(h),h=setTimeout(function(){e.onSearch(b)},e.options.searchTimeOut))}),o()&&c.off("mouseup").on("mouseup",function(a){clearTimeout(h),h=setTimeout(function(){e.onSearch(a)},e.options.searchTimeOut)}))},q.prototype.onSearch=function(b){var c=a.trim(a(b.currentTarget).val());this.options.trimOnSearch&&a(b.currentTarget).val()!==c&&a(b.currentTarget).val(c),c!==this.searchText&&(this.searchText=c,this.options.searchText=c,this.options.pageNumber=1,this.initSearch(),b.firedByInitSearchText?"client"===this.options.sidePagination&&this.updatePagination():this.updatePagination(),this.trigger("search",c))},q.prototype.initSearch=function(){var b=this;if("server"!==this.options.sidePagination){if(this.options.customSearch!==a.noop)return void window[this.options.customSearch].apply(this,[this.searchText]);var c=this.searchText&&(this.options.escape?l(this.searchText):this.searchText).toLowerCase(),d=a.isEmptyObject(this.filterColumns)?null:this.filterColumns;this.data=d?a.grep(this.options.data,function(b){for(var c in d)if(a.isArray(d[c])&&-1===a.inArray(b[c],d[c])||!a.isArray(d[c])&&b[c]!==d[c])return!1;return!0}):this.options.data,this.data=c?a.grep(this.data,function(d,e){for(var f=0;f<b.header.fields.length;f++)if(b.header.searchables[f]){var g,h=a.isNumeric(b.header.fields[f])?parseInt(b.header.fields[f],10):b.header.fields[f],i=b.columns[b.fieldsColumnsIndex[h]];if("string"==typeof h){g=d;for(var k=h.split("."),l=0;l<k.length;l++)null!=g[k[l]]&&(g=g[k[l]]);i&&i.searchFormatter&&(g=j(i,b.header.formatters[f],[g,d,e],g))}else g=d[h];if("string"==typeof g||"number"==typeof g)if(b.options.strictSearch){if((g+"").toLowerCase()===c)return!0}else if(-1!==(g+"").toLowerCase().indexOf(c))return!0}return!1}):this.data}},q.prototype.initPagination=function(){if(!this.options.pagination)return void this.$pagination.hide();this.$pagination.show();var b,c,e,g,h,i,j,k=this,l=[],m=!1,n=this.getData(),o=this.options.pageList;if("server"!==this.options.sidePagination&&(this.options.totalRows=n.length),this.totalPages=0,this.options.totalRows){if(this.options.pageSize===this.options.formatAllRows())this.options.pageSize=this.options.totalRows,m=!0;else if(this.options.pageSize===this.options.totalRows){var p="string"==typeof this.options.pageList?this.options.pageList.replace("[","").replace("]","").replace(/ /g,"").toLowerCase().split(","):this.options.pageList;a.inArray(this.options.formatAllRows().toLowerCase(),p)>-1&&(m=!0)}this.totalPages=~~((this.options.totalRows-1)/this.options.pageSize)+1,this.options.totalPages=this.totalPages}if(this.totalPages>0&&this.options.pageNumber>this.totalPages&&(this.options.pageNumber=this.totalPages),this.pageFrom=(this.options.pageNumber-1)*this.options.pageSize+1,this.pageTo=this.options.pageNumber*this.options.pageSize,this.pageTo>this.options.totalRows&&(this.pageTo=this.options.totalRows),l.push(f('<div class="%s-%s pagination-detail">',d.pullClass,this.options.paginationDetailHAlign),'<span class="pagination-info">',this.options.onlyInfoPagination?this.options.formatDetailPagination(this.options.totalRows):this.options.formatShowingRows(this.pageFrom,this.pageTo,this.options.totalRows),"</span>"),!this.options.onlyInfoPagination){l.push('<span class="page-list">');var q=[f('<span class="btn-group %s">',"top"===this.options.paginationVAlign||"both"===this.options.paginationVAlign?"dropdown":"dropup"),'<button type="button" class="btn'+f(" btn-%s",this.options.buttonsClass)+f(" btn-%s",this.options.iconSize)+' dropdown-toggle" data-toggle="dropdown">','<span class="page-size">',m?this.options.formatAllRows():this.options.pageSize,"</span>",' <span class="caret"></span>',"</button>",d.pageDropdownHtml[0]];if("string"==typeof this.options.pageList){var r=this.options.pageList.replace("[","").replace("]","").replace(/ /g,"").split(",");o=[],a.each(r,function(a,b){o.push(b.toUpperCase()===k.options.formatAllRows().toUpperCase()||"UNLIMITED"===b.toUpperCase()?k.options.formatAllRows():+b)})}for(a.each(o,function(a,b){if(!k.options.smartDisplay||0===a||o[a-1]<k.options.totalRows){var c;c=m?b===k.options.formatAllRows()?"active":"":b===k.options.pageSize?"active":"",q.push(f(d.pageDropdownItemHtml,c,b))}}),q.push(d.pageDropdownHtml[1]+"</span>"),l.push(this.options.formatRecordsPerPage(q.join(""))),l.push("</span>"),l.push("</div>",f('<div class="%s-%s pagination">',d.pullClass,this.options.paginationHAlign),'<ul class="pagination'+f(" pagination-%s",this.options.iconSize)+'">',f('<li class="page-item page-pre"><a class="page-link" href="#">%s</a></li>',this.options.paginationPreText)),this.totalPages<5?(c=1,e=this.totalPages):(c=this.options.pageNumber-2,e=c+4,1>c&&(c=1,e=5),e>this.totalPages&&(e=this.totalPages,c=e-4)),this.totalPages>=6&&(this.options.pageNumber>=3&&(l.push(f('<li class="page-item page-first%s">',1===this.options.pageNumber?" active":""),'<a class="page-link" href="#">',1,"</a>","</li>"),c++),this.options.pageNumber>=4&&(4==this.options.pageNumber||6==this.totalPages||7==this.totalPages?c--:l.push('<li class="page-item page-first-separator disabled">','<a class="page-link" href="#">...</a>',"</li>"),e--)),this.totalPages>=7&&this.options.pageNumber>=this.totalPages-2&&c--,6==this.totalPages?this.options.pageNumber>=this.totalPages-2&&e++:this.totalPages>=7&&(7==this.totalPages||this.options.pageNumber>=this.totalPages-3)&&e++,b=c;e>=b;b++)l.push(f('<li class="page-item%s">',b===this.options.pageNumber?" active":""),'<a class="page-link" href="#">',b,"</a>","</li>");this.totalPages>=8&&this.options.pageNumber<=this.totalPages-4&&l.push('<li class="page-item page-last-separator disabled">','<a class="page-link" href="#">...</a>',"</li>"),this.totalPages>=6&&this.options.pageNumber<=this.totalPages-3&&l.push(f('<li class="page-item page-last%s">',this.totalPages===this.options.pageNumber?" active":""),'<a class="page-link" href="#">',this.totalPages,"</a>","</li>"),l.push(f('<li class="page-item page-next"><a class="page-link" href="#">%s</a></li>',this.options.paginationNextText),"</ul>","</div>")}this.$pagination.html(l.join("")),this.options.onlyInfoPagination||(g=this.$pagination.find(".page-list a"),h=this.$pagination.find(".page-pre"),i=this.$pagination.find(".page-next"),j=this.$pagination.find(".page-item").not(".page-next, .page-pre"),this.options.smartDisplay&&(this.totalPages<=1&&this.$pagination.find("div.pagination").hide(),(o.length<2||this.options.totalRows<=o[0])&&this.$pagination.find("span.page-list").hide(),this.$pagination[this.getData().length?"show":"hide"]()),this.options.paginationLoop||(1===this.options.pageNumber&&h.addClass("disabled"),this.options.pageNumber===this.totalPages&&i.addClass("disabled")),m&&(this.options.pageSize=this.options.formatAllRows()),g.off("click").on("click",a.proxy(this.onPageListChange,this)),h.off("click").on("click",a.proxy(this.onPagePre,this)),i.off("click").on("click",a.proxy(this.onPageNext,this)),j.off("click").on("click",a.proxy(this.onPageNumber,this)))},q.prototype.updatePagination=function(b){b&&a(b.currentTarget).hasClass("disabled")||(this.options.maintainSelected||this.resetRows(),this.initPagination(),"server"===this.options.sidePagination?this.initServer():this.initBody(),this.trigger("page-change",this.options.pageNumber,this.options.pageSize))},q.prototype.onPageListChange=function(b){b.preventDefault();var c=a(b.currentTarget);return c.parent().addClass("active").siblings().removeClass("active"),this.options.pageSize=c.text().toUpperCase()===this.options.formatAllRows().toUpperCase()?this.options.formatAllRows():+c.text(),this.$toolbar.find(".page-size").text(this.options.pageSize),this.updatePagination(b),!1},q.prototype.onPagePre=function(a){return a.preventDefault(),this.options.pageNumber-1===0?this.options.pageNumber=this.options.totalPages:this.options.pageNumber--,this.updatePagination(a),!1},q.prototype.onPageNext=function(a){return a.preventDefault(),this.options.pageNumber+1>this.options.totalPages?this.options.pageNumber=1:this.options.pageNumber++,this.updatePagination(a),!1},q.prototype.onPageNumber=function(b){return b.preventDefault(),this.options.pageNumber!==+a(b.currentTarget).text()?(this.options.pageNumber=+a(b.currentTarget).text(),this.updatePagination(b),!1):void 0},q.prototype.initRow=function(b,c){var d,e=this,h=[],i={},k=[],m="",o={},p=[];if(!(a.inArray(b,this.hiddenRows)>-1)){if(i=j(this.options,this.options.rowStyle,[b,c],i),i&&i.css)for(d in i.css)k.push(d+": "+i.css[d]);if(o=j(this.options,this.options.rowAttributes,[b,c],o))for(d in o)p.push(f('%s="%s"',d,l(o[d])));return b._data&&!a.isEmptyObject(b._data)&&a.each(b._data,function(a,b){"index"!==a&&(m+=f(' data-%s="%s"',a,b))}),h.push("<tr",f(" %s",p.join(" ")),f(' id="%s"',a.isArray(b)?void 0:b._id),f(' class="%s"',i.classes||(a.isArray(b)?void 0:b._class)),f(' data-index="%s"',c),f(' data-uniqueid="%s"',b[this.options.uniqueId]),f("%s",m),">"),this.options.cardView&&h.push(f('<td colspan="%s"><div class="card-views">',this.header.fields.length)),!this.options.cardView&&this.options.detailView&&(h.push("<td>"),j(null,this.options.detailFilter,[c,b])&&h.push('<a class="detail-icon" href="#">',f('<i class="%s %s"></i>',this.options.iconsPrefix,this.options.icons.detailOpen),"</a>"),h.push("</td>")),a.each(this.header.fields,function(d,m){var o="",p=n(b,m,e.options.escape),q="",r="",s={},t="",u=e.header.classes[d],v="",w="",x="",y="",z=e.columns[d];

if((!e.fromHtml||"undefined"!=typeof p||z.checkbox||z.radio)&&z.visible&&(!e.options.cardView||z.cardVisible)){if(z.escape&&(p=l(p)),i=f('style="%s"',k.concat(e.header.styles[d]).join("; ")),b["_"+m+"_id"]&&(t=f(' id="%s"',b["_"+m+"_id"])),b["_"+m+"_class"]&&(u=f(' class="%s"',b["_"+m+"_class"])),b["_"+m+"_rowspan"]&&(w=f(' rowspan="%s"',b["_"+m+"_rowspan"])),b["_"+m+"_colspan"]&&(x=f(' colspan="%s"',b["_"+m+"_colspan"])),b["_"+m+"_title"]&&(y=f(' title="%s"',b["_"+m+"_title"])),s=j(e.header,e.header.cellStyles[d],[p,b,c,m],s),s.classes&&(u=f(' class="%s"',s.classes)),s.css){var A=[];for(var B in s.css)A.push(B+": "+s.css[B]);i=f('style="%s"',A.concat(e.header.styles[d]).join("; "))}q=j(z,e.header.formatters[d],[p,b,c,m],p),b["_"+m+"_data"]&&!a.isEmptyObject(b["_"+m+"_data"])&&a.each(b["_"+m+"_data"],function(a,b){"index"!==a&&(v+=f(' data-%s="%s"',a,b))}),z.checkbox||z.radio?(r=z.checkbox?"checkbox":r,r=z.radio?"radio":r,o=[f(e.options.cardView?'<div class="card-view %s">':'<td class="bs-checkbox %s">',z["class"]||""),"<input"+f(' data-index="%s"',c)+f(' name="%s"',e.options.selectItemName)+f(' type="%s"',r)+f(' value="%s"',b[e.options.idField])+f(' checked="%s"',q===!0||p||q&&q.checked?"checked":void 0)+f(' disabled="%s"',!z.checkboxEnabled||q&&q.disabled?"disabled":void 0)+" />",e.header.formatters[d]&&"string"==typeof q?q:"",e.options.cardView?"</div>":"</td>"].join(""),b[e.header.stateField]=q===!0||!!p||q&&q.checked):(q="undefined"==typeof q||null===q?e.options.undefinedText:q,o=e.options.cardView?['<div class="card-view">',e.options.showHeader?f('<span class="title" %s>%s</span>',i,g(e.columns,"field","title",m)):"",f('<span class="value">%s</span>',q),"</div>"].join(""):[f("<td%s %s %s %s %s %s %s>",t,u,i,v,w,x,y),q,"</td>"].join(""),e.options.cardView&&e.options.smartDisplay&&""===q&&(o='<div class="card-view"></div>')),h.push(o)}}),this.options.cardView&&h.push("</div></td>"),h.push("</tr>"),h.join(" ")}},q.prototype.initBody=function(b){var c=this,d=this.getData();this.trigger("pre-body",d),this.$body=this.$el.find(">tbody"),this.$body.length||(this.$body=a("<tbody></tbody>").appendTo(this.$el)),this.options.pagination&&"server"!==this.options.sidePagination||(this.pageFrom=1,this.pageTo=d.length);for(var e,g=a(document.createDocumentFragment()),h=this.pageFrom-1;h<this.pageTo;h++){var i=d[h],k=this.initRow(i,h,d,g);e=e||!!k,k&&k!==!0&&g.append(k)}e||g.append('<tr class="no-records-found">'+f('<td colspan="%s">%s</td>',this.$header.find("th").length,this.options.formatNoMatches())+"</tr>"),this.$body.html(g),b||this.scrollTo(0),this.$body.find("> tr[data-index] > td").off("click dblclick").on("click dblclick",function(b){var d=a(this),e=d.parent(),g=c.data[e.data("index")],h=d[0].cellIndex,i=c.getVisibleFields(),j=i[c.options.detailView&&!c.options.cardView?h-1:h],k=c.columns[c.fieldsColumnsIndex[j]],l=n(g,j,c.options.escape);if(!d.find(".detail-icon").length&&(c.trigger("click"===b.type?"click-cell":"dbl-click-cell",j,l,g,d),c.trigger("click"===b.type?"click-row":"dbl-click-row",g,e,j),"click"===b.type&&c.options.clickToSelect&&k.clickToSelect&&c.options.ignoreClickToSelectOn(b.target))){var m=e.find(f('[name="%s"]',c.options.selectItemName));m.length&&m[0].click()}}),this.$body.find("> tr[data-index] > td > .detail-icon").off("click").on("click",function(b){b.preventDefault();var e=a(this),g=e.parent().parent(),h=g.data("index"),i=d[h];if(g.next().is("tr.detail-view"))e.find("i").attr("class",f("%s %s",c.options.iconsPrefix,c.options.icons.detailOpen)),c.trigger("collapse-row",h,i,g.next()),g.next().remove();else{e.find("i").attr("class",f("%s %s",c.options.iconsPrefix,c.options.icons.detailClose)),g.after(f('<tr class="detail-view"><td colspan="%s"></td></tr>',g.find("td").length));var k=g.next().find("td"),l=j(c.options,c.options.detailFormatter,[h,i,k],"");1===k.length&&k.append(l),c.trigger("expand-row",h,i,k)}return c.resetView(),!1}),this.$selectItem=this.$body.find(f('[name="%s"]',this.options.selectItemName)),this.$selectItem.off("click").on("click",function(b){b.stopImmediatePropagation();var d=a(this),e=d.prop("checked"),f=c.data[d.data("index")];(a(this).is(":radio")||c.options.singleSelect)&&a.each(c.options.data,function(a,b){b[c.header.stateField]=!1}),f[c.header.stateField]=e,c.options.singleSelect&&(c.$selectItem.not(this).each(function(){c.data[a(this).data("index")][c.header.stateField]=!1}),c.$selectItem.filter(":checked").not(this).prop("checked",!1)),c.updateSelected(),c.trigger(e?"check":"uncheck",f,d)}),a.each(this.header.events,function(b,d){if(d){"string"==typeof d&&(d=j(null,d));var e=c.header.fields[b],f=a.inArray(e,c.getVisibleFields());if(-1!==f){c.options.detailView&&!c.options.cardView&&(f+=1);for(var g in d)c.$body.find(">tr:not(.no-records-found)").each(function(){var b=a(this),h=b.find(c.options.cardView?".card-view":"td").eq(f),i=g.indexOf(" "),j=g.substring(0,i),k=g.substring(i+1),l=d[g];h.find(k).off(j).on(j,function(a){var d=b.data("index"),f=c.data[d],g=f[e];l.apply(this,[a,g,f,d])})})}}}),this.updateSelected(),this.resetView(),this.trigger("post-body",d)},q.prototype.initServer=function(b,c,d){var e,f=this,g={},h=a.inArray(this.options.sortName,this.header.fields),i={searchText:this.searchText,sortName:this.options.sortName,sortOrder:this.options.sortOrder};this.header.sortNames[h]&&(i.sortName=this.header.sortNames[h]),this.options.pagination&&"server"===this.options.sidePagination&&(i.pageSize=this.options.pageSize===this.options.formatAllRows()?this.options.totalRows:this.options.pageSize,i.pageNumber=this.options.pageNumber),(d||this.options.url||this.options.ajax)&&("limit"===this.options.queryParamsType&&(i={search:i.searchText,sort:i.sortName,order:i.sortOrder},this.options.pagination&&"server"===this.options.sidePagination&&(i.offset=this.options.pageSize===this.options.formatAllRows()?0:this.options.pageSize*(this.options.pageNumber-1),i.limit=this.options.pageSize===this.options.formatAllRows()?this.options.totalRows:this.options.pageSize,0===i.limit&&delete i.limit)),a.isEmptyObject(this.filterColumnsPartial)||(i.filter=JSON.stringify(this.filterColumnsPartial,null)),g=j(this.options,this.options.queryParams,[i],g),a.extend(g,c||{}),g!==!1&&(b||this.$tableLoading.show(),e=a.extend({},j(null,this.options.ajaxOptions),{type:this.options.method,url:d||this.options.url,data:"application/json"===this.options.contentType&&"post"===this.options.method?JSON.stringify(g):g,cache:this.options.cache,contentType:this.options.contentType,dataType:this.options.dataType,success:function(a){a=j(f.options,f.options.responseHandler,[a],a),f.load(a),f.trigger("load-success",a),b||f.$tableLoading.hide()},error:function(a){var c=[];"server"===f.options.sidePagination&&(c={},c[f.options.totalField]=0,c[f.options.dataField]=[]),f.load(c),f.trigger("load-error",a.status,a),b||f.$tableLoading.hide()}}),this.options.ajax?j(this,this.options.ajax,[e],null):(this._xhr&&4!==this._xhr.readyState&&this._xhr.abort(),this._xhr=a.ajax(e))))},q.prototype.initSearchText=function(){if(this.options.search&&(this.searchText="",""!==this.options.searchText)){var a=this.$toolbar.find(".search input");a.val(this.options.searchText),this.onSearch({currentTarget:a,firedByInitSearchText:!0})}},q.prototype.getCaret=function(){var b=this;a.each(this.$header.find("th"),function(c,d){a(d).find(".sortable").removeClass("desc asc").addClass(a(d).data("field")===b.options.sortName?b.options.sortOrder:"both")})},q.prototype.updateSelected=function(){var b=this.$selectItem.filter(":enabled").length&&this.$selectItem.filter(":enabled").length===this.$selectItem.filter(":enabled").filter(":checked").length;this.$selectAll.add(this.$selectAll_).prop("checked",b),this.$selectItem.each(function(){a(this).closest("tr")[a(this).prop("checked")?"addClass":"removeClass"]("selected")})},q.prototype.updateRows=function(){var b=this;this.$selectItem.each(function(){b.data[a(this).data("index")][b.header.stateField]=a(this).prop("checked")})},q.prototype.resetRows=function(){var b=this;a.each(this.data,function(a,c){b.$selectAll.prop("checked",!1),b.$selectItem.prop("checked",!1),b.header.stateField&&(c[b.header.stateField]=!1)}),this.initHiddenRows()},q.prototype.trigger=function(b){var c=Array.prototype.slice.call(arguments,1);b+=".bs.table",this.options[q.EVENTS[b]].apply(this.options,c),this.$el.trigger(a.Event(b),c),this.options.onAll(b,c),this.$el.trigger(a.Event("all.bs.table"),[b,c])},q.prototype.resetHeader=function(){clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(a.proxy(this.fitHeader,this),this.$el.is(":hidden")?100:0)},q.prototype.fitHeader=function(){var b,c,d,e,g=this;if(g.$el.is(":hidden"))return void(g.timeoutId_=setTimeout(a.proxy(g.fitHeader,g),100));if(b=this.$tableBody.get(0),c=b.scrollWidth>b.clientWidth&&b.scrollHeight>b.clientHeight+this.$header.outerHeight()?i():0,this.$el.css("margin-top",-this.$header.outerHeight()),d=a(":focus"),d.length>0){var h=d.parents("th");if(h.length>0){var j=h.attr("data-field");if(void 0!==j){var k=this.$header.find("[data-field='"+j+"']");k.length>0&&k.find(":input").addClass("focus-temp")}}}this.$header_=this.$header.clone(!0,!0),this.$selectAll_=this.$header_.find('[name="btSelectAll"]'),this.$tableHeader.css({"margin-right":c}).find("table").css("width",this.$el.outerWidth()).html("").attr("class",this.$el.attr("class")).append(this.$header_),e=a(".focus-temp:visible:eq(0)"),e.length>0&&(e.focus(),this.$header.find(".focus-temp").removeClass("focus-temp")),this.$header.find("th[data-field]").each(function(){g.$header_.find(f('th[data-field="%s"]',a(this).data("field"))).data(a(this).data())});var l=this.getVisibleFields(),m=this.$header_.find("th");this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function(b){var c=a(this),d=b;if(g.options.detailView&&!g.options.cardView&&(0===b&&g.$header_.find("th.detail").find(".fht-cell").width(c.innerWidth()),d=b-1),-1!==d){var e=g.$header_.find(f('th[data-field="%s"]',l[d]));e.length>1&&(e=a(m[c[0].cellIndex]));var h=e.width()-e.find(".fht-cell").width();e.find(".fht-cell").width(c.innerWidth()-h)}}),this.horizontalScroll(),this.trigger("post-header")},q.prototype.resetFooter=function(){var b=this,c=b.getData(),d=[];this.options.showFooter&&!this.options.cardView&&(!this.options.cardView&&this.options.detailView&&d.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>'),a.each(this.columns,function(a,e){var g,h="",i="",k=[],l={},m=f(' class="%s"',e["class"]);if(e.visible&&(!b.options.cardView||e.cardVisible)){if(h=f("text-align: %s; ",e.falign?e.falign:e.align),i=f("vertical-align: %s; ",e.valign),l=j(null,b.options.footerStyle),l&&l.css)for(g in l.css)k.push(g+": "+l.css[g]);d.push("<td",m,f(' style="%s"',h+i+k.concat().join("; ")),">"),d.push('<div class="th-inner">'),d.push(j(e,e.footerFormatter,[c],"&nbsp;")||"&nbsp;"),d.push("</div>"),d.push('<div class="fht-cell"></div>'),d.push("</div>"),d.push("</td>")}}),this.$tableFooter.find("tr").html(d.join("")),this.$tableFooter.show(),clearTimeout(this.timeoutFooter_),this.timeoutFooter_=setTimeout(a.proxy(this.fitFooter,this),this.$el.is(":hidden")?100:0))},q.prototype.fitFooter=function(){var b,c,d;return clearTimeout(this.timeoutFooter_),this.$el.is(":hidden")?void(this.timeoutFooter_=setTimeout(a.proxy(this.fitFooter,this),100)):(c=this.$el.css("width"),d=c>this.$tableBody.width()?i():0,this.$tableFooter.css({"margin-right":d}).find("table").css("width",c).attr("class",this.$el.attr("class")),b=this.$tableFooter.find("td"),this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function(c){var d=a(this);b.eq(c).find(".fht-cell").width(d.innerWidth())}),void this.horizontalScroll())},q.prototype.horizontalScroll=function(){var b=this;b.trigger("scroll-body"),this.$tableBody.off("scroll").on("scroll",function(){b.options.showHeader&&b.options.height&&b.$tableHeader.scrollLeft(a(this).scrollLeft()),b.options.showFooter&&!b.options.cardView&&b.$tableFooter.scrollLeft(a(this).scrollLeft())})},q.prototype.toggleColumn=function(a,b,c){if(-1!==a&&(this.columns[a].visible=b,this.initHeader(),this.initSearch(),this.initPagination(),this.initBody(),this.options.showColumns)){var d=this.$toolbar.find(".keep-open input").prop("disabled",!1);c&&d.filter(f('[value="%s"]',a)).prop("checked",b),d.filter(":checked").length<=this.options.minimumCountColumns&&d.filter(":checked").prop("disabled",!0)}},q.prototype.getVisibleFields=function(){var b=this,c=[];return a.each(this.header.fields,function(a,d){var e=b.columns[b.fieldsColumnsIndex[d]];e.visible&&c.push(d)}),c},q.prototype.resetView=function(a){var b=0;if(a&&a.height&&(this.options.height=a.height),this.$selectAll.prop("checked",this.$selectItem.length>0&&this.$selectItem.length===this.$selectItem.filter(":checked").length),this.options.height){var c=this.$toolbar.outerHeight(!0),d=this.$pagination.outerHeight(!0),e=this.options.height-c-d;this.$tableContainer.css("height",e+"px")}return this.options.cardView?(this.$el.css("margin-top","0"),this.$tableContainer.css("padding-bottom","0"),void this.$tableFooter.hide()):(this.options.showHeader&&this.options.height?(this.$tableHeader.show(),this.resetHeader(),b+=this.$header.outerHeight()):(this.$tableHeader.hide(),this.trigger("post-header")),this.options.showFooter&&(this.resetFooter(),this.options.height&&(b+=this.$tableFooter.outerHeight()+1)),this.getCaret(),this.$tableContainer.css("padding-bottom",b+"px"),void this.trigger("reset-view"))},q.prototype.getData=function(b){var c=this.options.data;return(this.searchText||this.options.sortName||!a.isEmptyObject(this.filterColumns)||!a.isEmptyObject(this.filterColumnsPartial))&&(c=this.data),b?c.slice(this.pageFrom-1,this.pageTo):c},q.prototype.load=function(b){var c=!1;this.options.pagination&&"server"===this.options.sidePagination?(this.options.totalRows=b[this.options.totalField],c=b.fixedScroll,b=b[this.options.dataField]):a.isArray(b)||(c=b.fixedScroll,b=b.data),this.initData(b),this.initSearch(),this.initPagination(),this.initBody(c)},q.prototype.append=function(a){this.initData(a,"append"),this.initSearch(),this.initPagination(),this.initSort(),this.initBody(!0)},q.prototype.prepend=function(a){this.initData(a,"prepend"),this.initSearch(),this.initPagination(),this.initSort(),this.initBody(!0)},q.prototype.remove=function(b){var c,d,e=this.options.data.length;if(b.hasOwnProperty("field")&&b.hasOwnProperty("values")){for(c=e-1;c>=0;c--)d=this.options.data[c],d.hasOwnProperty(b.field)&&-1!==a.inArray(d[b.field],b.values)&&(this.options.data.splice(c,1),"server"===this.options.sidePagination&&(this.options.totalRows-=1));e!==this.options.data.length&&(this.initSearch(),this.initPagination(),this.initSort(),this.initBody(!0))}},q.prototype.removeAll=function(){this.options.data.length>0&&(this.options.data.splice(0,this.options.data.length),this.initSearch(),this.initPagination(),this.initBody(!0))},q.prototype.getRowByUniqueId=function(a){var b,c,d,e=this.options.uniqueId,f=this.options.data.length,g=null;for(b=f-1;b>=0;b--){if(c=this.options.data[b],c.hasOwnProperty(e))d=c[e];else{if(!c._data.hasOwnProperty(e))continue;d=c._data[e]}if("string"==typeof d?a=a.toString():"number"==typeof d&&(Number(d)===d&&d%1===0?a=parseInt(a):d===Number(d)&&0!==d&&(a=parseFloat(a))),d===a){g=c;break}}return g},q.prototype.removeByUniqueId=function(a){var b=this.options.data.length,c=this.getRowByUniqueId(a);c&&this.options.data.splice(this.options.data.indexOf(c),1),b!==this.options.data.length&&(this.initSearch(),this.initPagination(),this.initBody(!0))},q.prototype.updateByUniqueId=function(b){var c=this,d=a.isArray(b)?b:[b];a.each(d,function(b,d){var e;d.hasOwnProperty("id")&&d.hasOwnProperty("row")&&(e=a.inArray(c.getRowByUniqueId(d.id),c.options.data),-1!==e&&a.extend(c.options.data[e],d.row))}),this.initSearch(),this.initPagination(),this.initSort(),this.initBody(!0)},q.prototype.refreshColumnTitle=function(b){if(b.hasOwnProperty("field")&&b.hasOwnProperty("title")&&(this.columns[this.fieldsColumnsIndex[b.field]].title=this.options.escape?l(b.title):b.title,this.columns[this.fieldsColumnsIndex[b.field]].visible)){var c=void 0!==this.options.height?this.$tableHeader:this.$header;c.find("th[data-field]").each(function(){return a(this).data("field")===b.field?(a(a(this).find(".th-inner")[0]).text(b.title),!1):void 0})}},q.prototype.insertRow=function(a){a.hasOwnProperty("index")&&a.hasOwnProperty("row")&&(this.options.data.splice(a.index,0,a.row),this.initSearch(),this.initPagination(),this.initSort(),this.initBody(!0))},q.prototype.updateRow=function(b){var c=this,d=a.isArray(b)?b:[b];a.each(d,function(b,d){d.hasOwnProperty("index")&&d.hasOwnProperty("row")&&a.extend(c.options.data[d.index],d.row)}),this.initSearch(),this.initPagination(),this.initSort(),this.initBody(!0)},q.prototype.initHiddenRows=function(){this.hiddenRows=[]},q.prototype.showRow=function(a){this.toggleRow(a,!0)},q.prototype.hideRow=function(a){this.toggleRow(a,!1)},q.prototype.toggleRow=function(b,c){var d,e;b.hasOwnProperty("index")?d=this.getData()[b.index]:b.hasOwnProperty("uniqueId")&&(d=this.getRowByUniqueId(b.uniqueId)),d&&(e=a.inArray(d,this.hiddenRows),c||-1!==e?c&&e>-1&&this.hiddenRows.splice(e,1):this.hiddenRows.push(d),this.initBody(!0))},q.prototype.getHiddenRows=function(){var b=this,c=this.getData(),d=[];return a.each(c,function(c,e){a.inArray(e,b.hiddenRows)>-1&&d.push(e)}),this.hiddenRows=d,d},q.prototype.mergeCells=function(b){var c,d,e,f=b.index,g=a.inArray(b.field,this.getVisibleFields()),h=b.rowspan||1,i=b.colspan||1,j=this.$body.find(">tr");if(this.options.detailView&&!this.options.cardView&&(g+=1),e=j.eq(f).find(">td").eq(g),!(0>f||0>g||f>=this.data.length)){for(c=f;f+h>c;c++)for(d=g;g+i>d;d++)j.eq(c).find(">td").eq(d).hide();e.attr("rowspan",h).attr("colspan",i).show()}},q.prototype.updateCell=function(a){a.hasOwnProperty("index")&&a.hasOwnProperty("field")&&a.hasOwnProperty("value")&&(this.data[a.index][a.field]=a.value,a.reinit!==!1&&(this.initSort(),this.initBody(!0)))},q.prototype.updateCellById=function(b){var c=this;if(b.hasOwnProperty("id")&&b.hasOwnProperty("field")&&b.hasOwnProperty("value")){var d=a.isArray(b)?b:[b];a.each(d,function(b,d){var e;e=a.inArray(c.getRowByUniqueId(d.id),c.options.data),-1!==e&&(c.data[e][d.field]=d.value)}),b.reinit!==!1&&(this.initSort(),this.initBody(!0))}},q.prototype.getOptions=function(){return a.extend(!0,{},this.options)},q.prototype.getSelections=function(){var b=this;return a.grep(this.options.data,function(a){return a[b.header.stateField]===!0})},q.prototype.getAllSelections=function(){var b=this;return a.grep(this.options.data,function(a){return a[b.header.stateField]})},q.prototype.checkAll=function(){this.checkAll_(!0)},q.prototype.uncheckAll=function(){this.checkAll_(!1)},q.prototype.checkInvert=function(){var b=this,c=b.$selectItem.filter(":enabled"),d=c.filter(":checked");c.each(function(){a(this).prop("checked",!a(this).prop("checked"))}),b.updateRows(),b.updateSelected(),b.trigger("uncheck-some",d),d=b.getSelections(),b.trigger("check-some",d)},q.prototype.checkAll_=function(a){var b;a||(b=this.getSelections()),this.$selectAll.add(this.$selectAll_).prop("checked",a),this.$selectItem.filter(":enabled").prop("checked",a),this.updateRows(),a&&(b=this.getSelections()),this.trigger(a?"check-all":"uncheck-all",b)},q.prototype.check=function(a){this.check_(!0,a)},q.prototype.uncheck=function(a){this.check_(!1,a)},q.prototype.check_=function(a,b){var c=this.$selectItem.filter(f('[data-index="%s"]',b)).prop("checked",a);this.data[b][this.header.stateField]=a,this.updateSelected(),this.trigger(a?"check":"uncheck",this.data[b],c)},q.prototype.checkBy=function(a){this.checkBy_(!0,a)},q.prototype.uncheckBy=function(a){this.checkBy_(!1,a)},q.prototype.checkBy_=function(b,c){if(c.hasOwnProperty("field")&&c.hasOwnProperty("values")){var d=this,e=[];a.each(this.options.data,function(g,h){if(!h.hasOwnProperty(c.field))return!1;if(-1!==a.inArray(h[c.field],c.values)){var i=d.$selectItem.filter(":enabled").filter(f('[data-index="%s"]',g)).prop("checked",b);h[d.header.stateField]=b,e.push(h),d.trigger(b?"check":"uncheck",h,i)}}),this.updateSelected(),this.trigger(b?"check-some":"uncheck-some",e)}},q.prototype.destroy=function(){this.$el.insertBefore(this.$container),a(this.options.toolbar).insertBefore(this.$el),this.$container.next().remove(),this.$container.remove(),this.$el.html(this.$el_.html()).css("margin-top","0").attr("class",this.$el_.attr("class")||"")},q.prototype.showLoading=function(){this.$tableLoading.show()},q.prototype.hideLoading=function(){this.$tableLoading.hide()},q.prototype.togglePagination=function(){this.options.pagination=!this.options.pagination;var a=this.$toolbar.find('button[name="paginationSwitch"] i');this.options.pagination?a.attr("class",this.options.iconsPrefix+" "+this.options.icons.paginationSwitchDown):a.attr("class",this.options.iconsPrefix+" "+this.options.icons.paginationSwitchUp),this.updatePagination()},q.prototype.toggleFullscreen=function(){this.$el.closest(".bootstrap-table").toggleClass("fullscreen")},q.prototype.refresh=function(a){a&&a.url&&(this.options.url=a.url),a&&a.pageNumber&&(this.options.pageNumber=a.pageNumber),a&&a.pageSize&&(this.options.pageSize=a.pageSize),this.initServer(a&&a.silent,a&&a.query,a&&a.url),this.trigger("refresh",a)},q.prototype.resetWidth=function(){this.options.showHeader&&this.options.height&&this.fitHeader(),this.options.showFooter&&!this.options.cardView&&this.fitFooter()},q.prototype.showColumn=function(a){this.toggleColumn(this.fieldsColumnsIndex[a],!0,!0)},q.prototype.hideColumn=function(a){this.toggleColumn(this.fieldsColumnsIndex[a],!1,!0)},q.prototype.getHiddenColumns=function(){return a.grep(this.columns,function(a){return!a.visible})},q.prototype.getVisibleColumns=function(){return a.grep(this.columns,function(a){return a.visible})},q.prototype.toggleAllColumns=function(b){var c=this;if(a.each(this.columns,function(a){c.columns[a].visible=b}),this.initHeader(),this.initSearch(),this.initPagination(),this.initBody(),this.options.showColumns){var d=this.$toolbar.find(".keep-open input").prop("disabled",!1);d.filter(":checked").length<=this.options.minimumCountColumns&&d.filter(":checked").prop("disabled",!0)}},q.prototype.showAllColumns=function(){this.toggleAllColumns(!0)},q.prototype.hideAllColumns=function(){this.toggleAllColumns(!1)},q.prototype.filterBy=function(b){this.filterColumns=a.isEmptyObject(b)?{}:b,this.options.pageNumber=1,this.initSearch(),this.updatePagination()},q.prototype.scrollTo=function(a){return"string"==typeof a&&(a="bottom"===a?this.$tableBody[0].scrollHeight:0),"number"==typeof a&&this.$tableBody.scrollTop(a),"undefined"==typeof a?this.$tableBody.scrollTop():void 0},q.prototype.getScrollPosition=function(){return this.scrollTo()},q.prototype.selectPage=function(a){a>0&&a<=this.options.totalPages&&(this.options.pageNumber=a,this.updatePagination())},q.prototype.prevPage=function(){this.options.pageNumber>1&&(this.options.pageNumber--,this.updatePagination())},q.prototype.nextPage=function(){this.options.pageNumber<this.options.totalPages&&(this.options.pageNumber++,this.updatePagination())},q.prototype.toggleView=function(){this.options.cardView=!this.options.cardView,this.initHeader();var a=this.$toolbar.find('button[name="toggle"] i');this.options.cardView?(a.removeClass(this.options.icons.toggleOff),a.addClass(this.options.icons.toggleOn)):(a.removeClass(this.options.icons.toggleOn),a.addClass(this.options.icons.toggleOff)),this.initBody(),this.trigger("toggle",this.options.cardView)},q.prototype.refreshOptions=function(b){k(this.options,b,!0)||(this.options=a.extend(this.options,b),this.trigger("refresh-options",this.options),this.destroy(),this.init())},q.prototype.resetSearch=function(a){var b=this.$toolbar.find(".search input");b.val(a||""),this.onSearch({currentTarget:b})},q.prototype.expandRow_=function(a,b){var c=this.$body.find(f('> tr[data-index="%s"]',b));c.next().is("tr.detail-view")===(a?!1:!0)&&c.find("> td > .detail-icon").click()},q.prototype.expandRow=function(a){this.expandRow_(!0,a)},q.prototype.collapseRow=function(a){this.expandRow_(!1,a)},q.prototype.expandAllRows=function(b){if(b){var c=this.$body.find(f('> tr[data-index="%s"]',0)),d=this,e=null,g=!1,h=-1;if(c.next().is("tr.detail-view")?c.next().next().is("tr.detail-view")||(c.next().find(".detail-icon").click(),g=!0):(c.find("> td > .detail-icon").click(),g=!0),g)try{h=setInterval(function(){e=d.$body.find("tr.detail-view").last().find(".detail-icon"),e.length>0?e.click():clearInterval(h)},1)}catch(i){clearInterval(h)}}else for(var j=this.$body.children(),k=0;k<j.length;k++)this.expandRow_(!0,a(j[k]).data("index"))},q.prototype.collapseAllRows=function(b){if(b)this.expandRow_(!1,0);else for(var c=this.$body.children(),d=0;d<c.length;d++)this.expandRow_(!1,a(c[d]).data("index"))},q.prototype.updateFormatText=function(a,b){this.options[f("format%s",a)]&&("string"==typeof b?this.options[f("format%s",a)]=function(){return b}:"function"==typeof b&&(this.options[f("format%s",a)]=b)),this.initToolbar(),this.initPagination(),this.initBody()};var r=["getOptions","getSelections","getAllSelections","getData","load","append","prepend","remove","removeAll","insertRow","updateRow","updateCell","updateByUniqueId","removeByUniqueId","getRowByUniqueId","showRow","hideRow","getHiddenRows","mergeCells","refreshColumnTitle","checkAll","uncheckAll","checkInvert","check","uncheck","checkBy","uncheckBy","refresh","resetView","resetWidth","destroy","showLoading","hideLoading","showColumn","hideColumn","getHiddenColumns","getVisibleColumns","showAllColumns","hideAllColumns","filterBy","scrollTo","getScrollPosition","selectPage","prevPage","nextPage","togglePagination","toggleView","refreshOptions","resetSearch","expandRow","collapseRow","expandAllRows","collapseAllRows","updateFormatText","updateCellById"];a.fn.bootstrapTable=function(b){var c,d=Array.prototype.slice.call(arguments,1);return this.each(function(){var e=a(this),f=e.data("bootstrap.table"),g=a.extend({},q.DEFAULTS,e.data(),"object"==typeof b&&b);if("string"==typeof b){if(a.inArray(b,r)<0)throw new Error("Unknown method: "+b);if(!f)return;c=f[b].apply(f,d),"destroy"===b&&e.removeData("bootstrap.table")}f||e.data("bootstrap.table",f=new q(this,g))}),"undefined"==typeof c?this:c},a.fn.bootstrapTable.Constructor=q,a.fn.bootstrapTable.defaults=q.DEFAULTS,a.fn.bootstrapTable.columnDefaults=q.COLUMN_DEFAULTS,a.fn.bootstrapTable.locales=q.LOCALES,a.fn.bootstrapTable.methods=r,a.fn.bootstrapTable.utils={bootstrapVersion:b,sprintf:f,compareObjects:k,calculateObjectValue:j,getItemField:n,objectKeys:p,isIEBrowser:o},a(function(){a('[data-toggle="table"]').bootstrapTable()})}(jQuery);
/**
 * @preserve tableExport.jquery.plugin
 *
 * Version 1.9.10
 *
 * Copyright (c) 2015-2018 hhurz, https://github.com/hhurz
 *
 * Original Work Copyright (c) 2014 Giri Raj
 *
 * Licensed under the MIT License
 **/

'use strict';

(function ($) {
  $.fn.tableExport = function (options) {
    var defaults = {
      consoleLog:            false,
      csvEnclosure:          '"',
      csvSeparator:          ',',
      csvUseBOM:             true,
      displayTableName:      false,
      escape:                false,
      excelFileFormat:       'xlshtml',     // xmlss = XML Spreadsheet 2003 file format (XMLSS), xlshtml = Excel 2000 html format
      excelPageOrientation:  'portrait',    // portrait, landscape (xlshtml format only)
      excelRTL:              false,         // true = Set Excel option 'DisplayRightToLeft'
      excelstyles:           [],            // e.g. ['border-bottom', 'border-top', 'border-left', 'border-right']
      exportHiddenCells:     false,         // true = speed up export of large tables with hidden cells (hidden cells will be exported !)
      fileName:              'tableExport',
      htmlContent:           false,
      ignoreColumn:          [],
      ignoreRow:             [],
      jsonScope:             'all',         // head, data, all
      jspdf: {
        orientation:  'p',
        unit:         'pt',
        format:       'a4',             // jspdf page format or 'bestfit' for autmatic paper format selection
        margins:      {left: 20, right: 10, top: 10, bottom: 10},
        onDocCreated: null,
        autotable: {
          styles: {
            cellPadding: 2,
            rowHeight:   12,
            fontSize:    8,
            fillColor:   255,           // color value or 'inherit' to use css background-color from html table
            textColor:   50,            // color value or 'inherit' to use css color from html table
            fontStyle:   'normal',      // normal, bold, italic, bolditalic or 'inherit' to use css font-weight and fonst-style from html table
            overflow:    'ellipsize',   // visible, hidden, ellipsize or linebreak
            halign:      'left',        // left, center, right
            valign:      'middle'       // top, middle, bottom
          },
          headerStyles: {
            fillColor: [52, 73, 94],
            textColor: 255,
            fontStyle: 'bold',
            halign:    'center'
          },
          alternateRowStyles: {
            fillColor: 245
          },
          tableExport: {
            doc:               null,    // jsPDF doc object. If set, an already created doc will be used to export to
            onAfterAutotable:  null,
            onBeforeAutotable: null,
            onAutotableText:   null,
            onTable:           null,
            outputImages:      true
          }
        }
      },
      maxNestedTables: 1,               // max number of nested tables that will be exported. 0 = export all. Default = 1
      numbers: {
        html: {
          decimalMark:        '.',
          thousandsSeparator: ','
        },
        output: {                       // set output: false to keep number format in exported output
          decimalMark:        '.',
          thousandsSeparator: ','
        }
      },
      onCellData:        null,
      onCellHtmlData:    null,
      onIgnoreRow:       null,          // onIgnoreRow($tr, rowIndex): function should return true to not export a row
      onMsoNumberFormat: null,          // Excel 2000 html format only. See readme.md for more information about msonumberformat
      outputMode:        'file',        // 'file', 'string', 'base64' or 'window' (experimental)
      pdfmake: {
        enabled: false,                 // true: use pdfmake instead of jspdf and jspdf-autotable (experimental)
        docDefinition: {
          pageOrientation: 'portrait',  // 'portrait' or 'landscape'
          defaultStyle: {
            font: 'Roboto'              // default is 'Roboto', for arabic font set this option to 'Mirza' and include mirza_fonts.js
          }
        },
        fonts: {}
      },
      tbodySelector:     'tr',
      tfootSelector:     'tr',          // set empty ('') to prevent export of tfoot rows
      theadSelector:     'tr',
      tableName:         'Table',
      type:              'csv',         // 'csv', 'tsv', 'txt', 'sql', 'json', 'xml', 'excel', 'doc', 'png' or 'pdf'
      worksheetName:     ''
    };

    var FONT_ROW_RATIO = 1.15;
    var el             = this;
    var DownloadEvt    = null;
    var $hrows         = [];
    var $rows          = [];
    var rowIndex       = 0;
    var trData         = '';
    var colNames       = [];
    var ranges         = [];
    var blob;
    var $hiddenTableElements = [];
    var checkCellVisibilty = false;

    $.extend(true, defaults, options);

    defaults.maxNestedTables = (defaults.maxNestedTables >= 0 ? defaults.maxNestedTables : 1);

    colNames = GetColumnNames(el);

    if ( defaults.type == 'csv' || defaults.type == 'tsv' || defaults.type == 'txt' ) {

      var csvData   = "";
      var rowlength = 0;
      ranges        = [];
      rowIndex      = 0;

      var csvString = function (cell, rowIndex, colIndex) {
        var result = '';

        if ( cell !== null ) {
          var dataString = parseString(cell, rowIndex, colIndex);

          var csvValue = (dataString === null || dataString === '') ? '' : dataString.toString();

          if ( defaults.type == 'tsv' ) {
            if ( dataString instanceof Date )
              dataString.toLocaleString();

            // According to http://www.iana.org/assignments/media-types/text/tab-separated-values
            // are fields that contain tabs not allowable in tsv encoding
            result = replaceAll(csvValue, '\t', ' ');
          }
          else {
            // Takes a string and encapsulates it (by default in double-quotes) if it
            // contains the csv field separator, spaces, or linebreaks.
            if ( dataString instanceof Date )
              result = defaults.csvEnclosure + dataString.toLocaleString() + defaults.csvEnclosure;
            else {
              result = replaceAll(csvValue, defaults.csvEnclosure, defaults.csvEnclosure + defaults.csvEnclosure);

              if ( result.indexOf(defaults.csvSeparator) >= 0 || /[\r\n ]/g.test(result) )
                result = defaults.csvEnclosure + result + defaults.csvEnclosure;
            }
          }
        }

        return result;
      };

      var CollectCsvData = function ($rows, rowselector, length) {

        $rows.each(function () {
          trData = "";
          ForEachVisibleCell(this, rowselector, rowIndex, length + $rows.length,
                             function (cell, row, col) {
                               trData += csvString(cell, row, col) + (defaults.type == 'tsv' ? '\t' : defaults.csvSeparator);
                             });
          trData = $.trim(trData).substring(0, trData.length - 1);
          if ( trData.length > 0 ) {

            if ( csvData.length > 0 )
              csvData += "\n";

            csvData += trData;
          }
          rowIndex++;
        });

        return $rows.length;
      };

      rowlength += CollectCsvData($(el).find('thead').first().find(defaults.theadSelector), 'th,td', rowlength);
      findTablePart($(el),'tbody').each(function () {
        rowlength += CollectCsvData(findRows($(this), defaults.tbodySelector), 'td,th', rowlength);
      });
      if ( defaults.tfootSelector.length )
        CollectCsvData($(el).find('tfoot').first().find(defaults.tfootSelector), 'td,th', rowlength);

      csvData += "\n";

      //output
      if ( defaults.consoleLog === true )
        console.log(csvData);

      if ( defaults.outputMode === 'string' )
        return csvData;

      if ( defaults.outputMode === 'base64' )
        return base64encode(csvData);

      if ( defaults.outputMode === 'window' ) {
        downloadFile(false, 'data:text/' + (defaults.type == 'csv' ? 'csv' : 'plain') + ';charset=utf-8,', csvData);
        return;
      }

      try {
        blob = new Blob([csvData], {type: "text/" + (defaults.type == 'csv' ? 'csv' : 'plain') + ";charset=utf-8"});
        saveAs(blob, defaults.fileName + '.' + defaults.type, (defaults.type != 'csv' || defaults.csvUseBOM === false));
      }
      catch (e) {
        downloadFile(defaults.fileName + '.' + defaults.type,
          'data:text/' + (defaults.type == 'csv' ? 'csv' : 'plain') + ';charset=utf-8,' + ((defaults.type == 'csv' && defaults.csvUseBOM) ? '\ufeff' : ''),
          csvData);
      }

    } else if ( defaults.type == 'sql' ) {

      // Header
      rowIndex = 0;
      ranges   = [];
      var tdData = "INSERT INTO `" + defaults.tableName + "` (";
      $hrows     = $(el).find('thead').first().find(defaults.theadSelector);
      $hrows.each(function () {
        ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                           function (cell, row, col) {
                             tdData += "'" + parseString(cell, row, col) + "',";
                           });
        rowIndex++;
        tdData = $.trim(tdData).substring(0, tdData.length - 1);
      });
      tdData += ") VALUES ";

      // Data
      $rows = collectRows ($(el));
      $($rows).each(function () {
        trData = "";
        ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                           function (cell, row, col) {
                             trData += "'" + parseString(cell, row, col) + "',";
                           });
        if ( trData.length > 3 ) {
          tdData += "(" + trData;
          tdData = $.trim(tdData).substring(0, tdData.length - 1);
          tdData += "),";
        }
        rowIndex++;
      });

      tdData = $.trim(tdData).substring(0, tdData.length - 1);
      tdData += ";";

      // Output
      if ( defaults.consoleLog === true )
        console.log(tdData);

      if ( defaults.outputMode === 'string' )
        return tdData;

      if ( defaults.outputMode === 'base64' )
        return base64encode(tdData);

      try {
        blob = new Blob([tdData], {type: "text/plain;charset=utf-8"});
        saveAs(blob, defaults.fileName + '.sql');
      }
      catch (e) {
        downloadFile(defaults.fileName + '.sql',
          'data:application/sql;charset=utf-8,',
          tdData);
      }

    } else if ( defaults.type == 'json' ) {
      var jsonHeaderArray = [];
      ranges = [];
      $hrows = $(el).find('thead').first().find(defaults.theadSelector);
      $hrows.each(function () {
        var jsonArrayTd = [];

        ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                           function (cell, row, col) {
                             jsonArrayTd.push(parseString(cell, row, col));
                           });
        jsonHeaderArray.push(jsonArrayTd);
      });

      // Data
      var jsonArray = [];

      $rows = collectRows ($(el));
      $($rows).each(function () {
        var jsonObjectTd = {};
        var colIndex = 0;

        ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                           function (cell, row, col) {
                             if ( jsonHeaderArray.length ) {
                               jsonObjectTd[jsonHeaderArray[jsonHeaderArray.length - 1][colIndex]] = parseString(cell, row, col);
                             } else {
                               jsonObjectTd[colIndex] = parseString(cell, row, col);
                             }
                             colIndex++;
                           });
        if ( $.isEmptyObject(jsonObjectTd) === false )
          jsonArray.push(jsonObjectTd);

        rowIndex++;
      });

      var sdata = "";

      if ( defaults.jsonScope == 'head' )
        sdata = JSON.stringify(jsonHeaderArray);
      else if ( defaults.jsonScope == 'data' )
        sdata = JSON.stringify(jsonArray);
      else // all
        sdata = JSON.stringify({header: jsonHeaderArray, data: jsonArray});

      if ( defaults.consoleLog === true )
        console.log(sdata);

      if ( defaults.outputMode === 'string' )
        return sdata;

      if ( defaults.outputMode === 'base64' )
        return base64encode(sdata);

      try {
        blob = new Blob([sdata], {type: "application/json;charset=utf-8"});
        saveAs(blob, defaults.fileName + '.json');
      }
      catch (e) {
        downloadFile(defaults.fileName + '.json',
          'data:application/json;charset=utf-8;base64,',
          sdata);
      }

    } else if ( defaults.type === 'xml' ) {
      rowIndex = 0;
      ranges   = [];
      var xml  = '<?xml version="1.0" encoding="utf-8"?>';
      xml += '<tabledata><fields>';

      // Header
      $hrows = $(el).find('thead').first().find(defaults.theadSelector);
      $hrows.each(function () {

        ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                           function (cell, row, col) {
                             xml += "<field>" + parseString(cell, row, col) + "</field>";
                           });
        rowIndex++;
      });
      xml += '</fields><data>';

      // Data
      var rowCount = 1;

      $rows = collectRows ($(el));
      $($rows).each(function () {
        var colCount = 1;
        trData       = "";
        ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                           function (cell, row, col) {
                             trData += "<column-" + colCount + ">" + parseString(cell, row, col) + "</column-" + colCount + ">";
                             colCount++;
                           });
        if ( trData.length > 0 && trData != "<column-1></column-1>" ) {
          xml += '<row id="' + rowCount + '">' + trData + '</row>';
          rowCount++;
        }

        rowIndex++;
      });
      xml += '</data></tabledata>';

      // Output
      if ( defaults.consoleLog === true )
        console.log(xml);

      if ( defaults.outputMode === 'string' )
        return xml;

      if ( defaults.outputMode === 'base64' )
        return base64encode(xml);

      try {
        blob = new Blob([xml], {type: "application/xml;charset=utf-8"});
        saveAs(blob, defaults.fileName + '.xml');
      }
      catch (e) {
        downloadFile(defaults.fileName + '.xml',
          'data:application/xml;charset=utf-8;base64,',
          xml);
      }
    }
    else if ( defaults.type === 'excel' && defaults.excelFileFormat === 'xmlss' ) {
      var docDatas = [];
      var docNames = [];

      $(el).filter(function () {
        return isVisible($(this));
      }).each(function () {
        var $table  = $(this);

        var ssName = '';
        if ( typeof defaults.worksheetName === 'string' && defaults.worksheetName.length )
          ssName = defaults.worksheetName + ' ' + (docNames.length + 1);
        else if ( typeof defaults.worksheetName[docNames.length] !== 'undefined' )
          ssName = defaults.worksheetName[docNames.length];
        if ( ! ssName.length )
          ssName = $table.find('caption').text() || '';
        if ( ! ssName.length )
          ssName = 'Table ' + (docNames.length + 1);
        ssName = $.trim(ssName.replace(/[\\\/[\]*:?'"]/g,'').substring(0,31));

        docNames.push($('<div />').text(ssName).html());

        if ( defaults.exportHiddenCells === false ) {
          $hiddenTableElements = $table.find("tr, th, td").filter(":hidden");
          checkCellVisibilty = $hiddenTableElements.length > 0;
        }

        rowIndex = 0;
        colNames = GetColumnNames(this);
        docData  = '<Table>\r';

        function CollectXmlssData ($rows, rowselector, length) {
          var spans = [];

          $($rows).each(function () {
            var ssIndex = 0;
            var nCols = 0;
            trData   = "";

            ForEachVisibleCell(this, 'td,th', rowIndex, length + $rows.length,
                               function (cell, row, col) {
                                 if ( cell !== null ) {
                                   var style = "";
                                   var data  = parseString(cell, row, col);
                                   var type  = "String";

                                   if ( jQuery.isNumeric(data) !== false ) {
                                     type = "Number";
                                   }
                                   else {
                                     var number = parsePercent(data);
                                     if ( number !== false ) {
                                       data  = number;
                                       type  = "Number";
                                       style += ' ss:StyleID="pct1"';
                                     }
                                   }

                                   if ( type !== "Number" )
                                     data = data.replace(/\n/g, '<br>');

                                   var colspan = getColspan (cell);
                                   var rowspan = getRowspan (cell);

                                   // Skip spans
                                   $.each(spans, function () {
                                     var range = this;
                                     if ( rowIndex >= range.s.r && rowIndex <= range.e.r && nCols >= range.s.c && nCols <= range.e.c ) {
                                       for ( var i = 0; i <= range.e.c - range.s.c; ++i ) {
                                         nCols++;
                                         ssIndex++;
                                       }
                                     }
                                   });

                                   // Handle Row Span
                                   if ( rowspan || colspan ) {
                                     rowspan = rowspan || 1;
                                     colspan = colspan || 1;
                                     spans.push({
                                                  s: {r: rowIndex, c: nCols},
                                                  e: {r: rowIndex + rowspan - 1, c: nCols + colspan - 1}
                                                });
                                   }

                                   // Handle Colspan
                                   if ( colspan > 1 ) {
                                     style += ' ss:MergeAcross="' + (colspan-1) + '"';
                                     nCols += (colspan - 1);
                                   }

                                   if ( rowspan > 1 ) {
                                     style += ' ss:MergeDown="' + (rowspan-1) + '" ss:StyleID="rsp1"';
                                   }

                                   if ( ssIndex > 0 ) {
                                     style += ' ss:Index="' + (nCols+1) + '"';
                                     ssIndex = 0;
                                   }

                                   trData += '<Cell' + style + '><Data ss:Type="' + type + '">' +
                                     $('<div />').text(data).html() +
                                     '</Data></Cell>\r';
                                   nCols++;
                                 }
                               });
            if ( trData.length > 0 )
              docData += '<Row ss:AutoFitHeight="0">\r' + trData + '</Row>\r';
            rowIndex++;
          });

          return $rows.length;
        }

        var rowLength = 0;
        rowLength += CollectXmlssData ($table.find('thead').first().find(defaults.theadSelector), 'th,td', rowLength);
        CollectXmlssData (collectRows ($table), 'td,th', rowLength);

        docData += '</Table>\r';
        docDatas.push(docData);

        if ( defaults.consoleLog === true )
          console.log(docData);
      });

      var count = {};
      var firstOccurences = {};
      var item, itemCount;
      for (var n = 0, c = docNames.length; n < c; n++)
      {
        item = docNames[n];
        itemCount = count[item];
        itemCount = count[item] = (itemCount == null ? 1 : itemCount + 1);

        if( itemCount == 2 )
          docNames[firstOccurences[item]] = docNames[firstOccurences[item]].substring(0,29) + "-1";
        if( count[ item ] > 1 )
          docNames[n] = docNames[n].substring(0,29) + "-" + count[item];
        else
          firstOccurences[item] = n;
      }

      var CreationDate = new Date().toISOString();
      var xmlssDocFile = '<?xml version="1.0" encoding="UTF-8"?>\r' +
        '<?mso-application progid="Excel.Sheet"?>\r' +
        '<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"\r' +
        ' xmlns:o="urn:schemas-microsoft-com:office:office"\r' +
        ' xmlns:x="urn:schemas-microsoft-com:office:excel"\r' +
        ' xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"\r' +
        ' xmlns:html="http://www.w3.org/TR/REC-html40">\r' +
        '<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">\r' +
        '  <Created>' + CreationDate + '</Created>\r' +
        '</DocumentProperties>\r' +
        '<OfficeDocumentSettings xmlns="urn:schemas-microsoft-com:office:office">\r' +
        '  <AllowPNG/>\r' +
        '</OfficeDocumentSettings>\r' +
        '<ExcelWorkbook xmlns="urn:schemas-microsoft-com:office:excel">\r' +
        '  <WindowHeight>9000</WindowHeight>\r' +
        '  <WindowWidth>13860</WindowWidth>\r' +
        '  <WindowTopX>0</WindowTopX>\r' +
        '  <WindowTopY>0</WindowTopY>\r' +
        '  <ProtectStructure>False</ProtectStructure>\r' +
        '  <ProtectWindows>False</ProtectWindows>\r' +
        '</ExcelWorkbook>\r' +
        '<Styles>\r' +
        '  <Style ss:ID="Default" ss:Name="Normal">\r' +
        '    <Alignment ss:Vertical="Bottom"/>\r' +
        '    <Borders/>\r' +
        '    <Font/>\r' +
        '    <Interior/>\r' +
        '    <NumberFormat/>\r' +
        '    <Protection/>\r' +
        '  </Style>\r' +
        '  <Style ss:ID="rsp1">\r' +
        '    <Alignment ss:Vertical="Center"/>\r' +
        '  </Style>\r' +
        '  <Style ss:ID="pct1">\r' +
        '    <NumberFormat ss:Format="Percent"/>\r' +
        '  </Style>\r' +
        '</Styles>\r';

      for ( var j = 0; j < docDatas.length; j++ ) {
        xmlssDocFile += '<Worksheet ss:Name="' + docNames[j] + '" ss:RightToLeft="' + (defaults.excelRTL ? '1' : '0') + '">\r' +
          docDatas[j];
        if (defaults.excelRTL) {
          xmlssDocFile += '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel">\r' +
            '<DisplayRightToLeft/>\r' +
            '</WorksheetOptions>\r';
        }
        else
          xmlssDocFile += '<WorksheetOptions xmlns="urn:schemas-microsoft-com:office:excel"/>\r';
        xmlssDocFile += '</Worksheet>\r';
      }

      xmlssDocFile += '</Workbook>\r';

      if ( defaults.consoleLog === true )
        console.log(xmlssDocFile);

      if ( defaults.outputMode === 'string' )
        return xmlssDocFile;

      if ( defaults.outputMode === 'base64' )
        return base64encode(xmlssDocFile);

      try {
        blob = new Blob([xmlssDocFile], {type: "application/xml;charset=utf-8"});
        saveAs(blob, defaults.fileName + '.xml');
      }
      catch (e) {
        downloadFile(defaults.fileName + '.xml',
          'data:application/xml;charset=utf-8;base64,',
          xmlssDocFile);
      }
    }
    else if ( defaults.type == 'excel' || defaults.type == 'xls' || defaults.type == 'word' || defaults.type == 'doc' ) {

      var MSDocType   = (defaults.type == 'excel' || defaults.type == 'xls') ? 'excel' : 'word';
      var MSDocExt    = (MSDocType == 'excel') ? 'xls' : 'doc';
      var MSDocSchema = 'xmlns:x="urn:schemas-microsoft-com:office:' + MSDocType + '"';
      var docData     = '';
      var docName     = '';

      $(el).filter(function () {
        return isVisible($(this));
      }).each(function () {
        var $table = $(this);

        if (docName === '') {
          docName = defaults.worksheetName || $table.find('caption').text() || 'Table';
          docName = $.trim(docName.replace(/[\\\/[\]*:?'"]/g, '').substring(0, 31));
        }

        if ( defaults.exportHiddenCells === false ) {
          $hiddenTableElements = $table.find("tr, th, td").filter(":hidden");
          checkCellVisibilty = $hiddenTableElements.length > 0;
        }

        rowIndex = 0;
        ranges   = [];
        colNames = GetColumnNames(this);

        // Header
        docData += '<table><thead>';
        $hrows = $table.find('thead').first().find(defaults.theadSelector);
        $hrows.each(function () {
          trData = "";
          ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                             function (cell, row, col) {
                               if ( cell !== null ) {
                                 var thstyle = '';
                                 trData += '<th';
                                 for ( var styles in defaults.excelstyles ) {
                                   if ( defaults.excelstyles.hasOwnProperty(styles) ) {
                                     var thcss = $(cell).css(defaults.excelstyles[styles]);
                                     if ( thcss !== '' && thcss != '0px none rgb(0, 0, 0)' && thcss != 'rgba(0, 0, 0, 0)' ) {
                                       thstyle += (thstyle === '') ? 'style="' : ';';
                                       thstyle += defaults.excelstyles[styles] + ':' + thcss;
                                     }
                                   }
                                 }
                                 if ( thstyle !== '' )
                                   trData += ' ' + thstyle + '"';

                                 var tdcolspan = getColspan (cell);
                                 if ( tdcolspan > 0 )
                                   trData += ' colspan="' + tdcolspan + '"';

                                 var tdrowspan = getRowspan (cell);
                                 if ( tdrowspan > 0 )
                                   trData += ' rowspan="' + tdrowspan + '"';

                                 trData += '>' + parseString(cell, row, col) + '</th>';
                               }
                             });
          if ( trData.length > 0 )
            docData += '<tr>' + trData + '</tr>';
          rowIndex++;
        });
        docData += '</thead><tbody>';

        // Data
        $rows = collectRows ($table);
        $($rows).each(function () {
          var $row = $(this);
          trData   = "";
          ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                             function (cell, row, col) {
                               if ( cell !== null ) {
                                 var tdvalue = parseString(cell, row, col);
                                 var tdstyle = '';
                                 var tdcss   = $(cell).data("tableexport-msonumberformat");

                                 if ( typeof tdcss == 'undefined' && typeof defaults.onMsoNumberFormat === 'function' )
                                   tdcss = defaults.onMsoNumberFormat(cell, row, col);

                                 if ( typeof tdcss != 'undefined' && tdcss !== '' )
                                   tdstyle = 'style="mso-number-format:\'' + tdcss + '\'';

                                 for ( var cssStyle in defaults.excelstyles ) {
                                   if ( defaults.excelstyles.hasOwnProperty(cssStyle) ) {
                                     tdcss = $(cell).css(defaults.excelstyles[cssStyle]);
                                     if ( tdcss === '' )
                                       tdcss = $row.css(defaults.excelstyles[cssStyle]);

                                     if ( tdcss !== '' && tdcss != '0px none rgb(0, 0, 0)' && tdcss != 'rgba(0, 0, 0, 0)' ) {
                                       tdstyle += (tdstyle === '') ? 'style="' : ';';
                                       tdstyle += defaults.excelstyles[cssStyle] + ':' + tdcss;
                                     }
                                   }
                                 }
                                 trData += '<td';
                                 if ( tdstyle !== '' )
                                   trData += ' ' + tdstyle + '"';

                                 var tdcolspan = getColspan (cell);
                                 if ( tdcolspan > 0 )
                                   trData += ' colspan="' + tdcolspan + '"';

                                 var tdrowspan = getRowspan (cell);
                                 if ( tdrowspan > 0 )
                                   trData += ' rowspan="' + tdrowspan + '"';

                                 if ( typeof tdvalue === 'string' && tdvalue != '' )
                                   tdvalue = tdvalue.replace(/\n/g, '<br>');

                                 trData += '>' + tdvalue + '</td>';
                               }
                             });
          if ( trData.length > 0 )
            docData += '<tr>' + trData + '</tr>';
          rowIndex++;
        });

        if ( defaults.displayTableName )
          docData += '<tr><td></td></tr><tr><td></td></tr><tr><td>' + parseString($('<p>' + defaults.tableName + '</p>')) + '</td></tr>';

        docData += '</tbody></table>';

        if ( defaults.consoleLog === true )
          console.log(docData);
      });

      //noinspection XmlUnusedNamespaceDeclaration
      var docFile = '<html xmlns:o="urn:schemas-microsoft-com:office:office" ' + MSDocSchema + ' xmlns="http://www.w3.org/TR/REC-html40">';
      docFile += '<meta http-equiv="content-type" content="application/vnd.ms-' + MSDocType + '; charset=UTF-8">';
      docFile += "<head>";
      if (MSDocType === 'excel') {
        docFile += "<!--[if gte mso 9]>";
        docFile += "<xml>";
        docFile += "<x:ExcelWorkbook>";
        docFile += "<x:ExcelWorksheets>";
        docFile += "<x:ExcelWorksheet>";
        docFile += "<x:Name>";
        docFile += docName;
        docFile += "</x:Name>";
        docFile += "<x:WorksheetOptions>";
        docFile += "<x:DisplayGridlines/>";
        if (defaults.excelRTL)
          docFile += "<x:DisplayRightToLeft/>";
        docFile += "</x:WorksheetOptions>";
        docFile += "</x:ExcelWorksheet>";
        docFile += "</x:ExcelWorksheets>";
        docFile += "</x:ExcelWorkbook>";
        docFile += "</xml>";
        docFile += "<![endif]-->";
      }
      docFile += "<style>";
      if (defaults.excelPageOrientation !== '')
        docFile += "@page { size: landscape; mso-page-orientation: " + defaults.excelPageOrientation + "; }";
      docFile += "br {mso-data-placement:same-cell;}";
      docFile += "</style>";
      docFile += "</head>";
      docFile += "<body>";
      docFile += docData;
      docFile += "</body>";
      docFile += "</html>";

      if ( defaults.consoleLog === true )
        console.log(docFile);

      if ( defaults.outputMode === 'string' )
        return docFile;

      if ( defaults.outputMode === 'base64' )
        return base64encode(docFile);

      try {
        blob = new Blob([docFile], {type: 'application/vnd.ms-' + defaults.type});
        saveAs(blob, defaults.fileName + '.' + MSDocExt);
      }
      catch (e) {
        downloadFile(defaults.fileName + '.' + MSDocExt,
          'data:application/vnd.ms-' + MSDocType + ';base64,',
          docFile);
      }

    } else if ( defaults.type == 'xlsx' ) {

      var data  = [];
      var spans = [];
      rowIndex  = 0;

      $rows = $(el).find('thead').first().find(defaults.theadSelector).toArray();
      $rows.push.apply($rows, collectRows ($(el)));

      $($rows).each(function () {
        var cols = [];
        ForEachVisibleCell(this, 'th,td', rowIndex, $rows.length,
                           function (cell, row, col) {
                             if ( typeof cell !== 'undefined' && cell !== null ) {

                               var cellValue = parseString(cell, row, col);

                               var colspan = getColspan (cell);
                               var rowspan = getRowspan (cell);

                               // Skip span ranges
                               $.each(spans, function () {
                                 var range = this;
                                 if ( rowIndex >= range.s.r && rowIndex <= range.e.r && cols.length >= range.s.c && cols.length <= range.e.c ) {
                                   for ( var i = 0; i <= range.e.c - range.s.c; ++i )
                                     cols.push(null);
                                 }
                               });

                               // Handle Row Span
                               if ( rowspan || colspan ) {
                                 rowspan = rowspan || 1;
                                 colspan = colspan || 1;
                                 spans.push({
                                              s: {r: rowIndex, c: cols.length},
                                              e: {r: rowIndex + rowspan - 1, c: cols.length + colspan - 1}
                                            });
                               }

                               // Handle Value
                               if ( typeof defaults.onCellData !== 'function' ) {

                                 // Type conversion
                                 if ( cellValue !== "" && cellValue == +cellValue )
                                   cellValue = +cellValue;
                               }
                               cols.push(cellValue !== "" ? cellValue : null);

                               // Handle Colspan
                               if ( colspan )
                                 for ( var k = 0; k < colspan - 1; ++k )
                                   cols.push(null);
                             }
                           });
        data.push(cols);
        rowIndex++;
      });

      //noinspection JSPotentiallyInvalidConstructorUsage
      var wb = new jx_Workbook(),
        ws = jx_createSheet(data);

      // add span ranges to worksheet
      ws['!merges'] = spans;

      // add worksheet to workbook
      wb.SheetNames.push(defaults.worksheetName);
      wb.Sheets[defaults.worksheetName] = ws;

      var wbout = XLSX.write(wb, {bookType: defaults.type, bookSST: false, type: 'binary'});

      try {
        blob = new Blob([jx_s2ab(wbout)], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'});
        saveAs(blob, defaults.fileName + '.' + defaults.type);
      }
      catch (e) {
        downloadFile(defaults.fileName + '.' + defaults.type,
          'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8,',
          jx_s2ab(wbout));
      }

    } else if ( defaults.type == 'png' ) {
      //html2canvas($(el)[0], {
      //  onrendered: function (canvas) {
      html2canvas($(el)[0]).then(
        function (canvas) {

          var image      = canvas.toDataURL();
          var byteString = atob(image.substring(22)); // remove data stuff
          var buffer     = new ArrayBuffer(byteString.length);
          var intArray   = new Uint8Array(buffer);

          for ( var i = 0; i < byteString.length; i++ )
            intArray[i] = byteString.charCodeAt(i);

          if ( defaults.consoleLog === true )
            console.log(byteString);

          if ( defaults.outputMode === 'string' )
            return byteString;

          if ( defaults.outputMode === 'base64' )
            return base64encode(image);

          if ( defaults.outputMode === 'window' ) {
            window.open(image);
            return;
          }

          try {
            blob = new Blob([buffer], {type: "image/png"});
            saveAs(blob, defaults.fileName + '.png');
          }
          catch (e) {
            downloadFile(defaults.fileName + '.png', 'data:image/png,', blob);
          }
          //}
        });

    } else if ( defaults.type == 'pdf' ) {

      if ( defaults.pdfmake.enabled === true ) {
        // pdf output using pdfmake
        // https://github.com/bpampuch/pdfmake

        var widths = [];
        var body   = [];
        rowIndex   = 0;
        ranges     = [];

        var CollectPdfmakeData = function ($rows, colselector, length) {
          var rlength = 0;

          $($rows).each(function () {
            var r = [];

            ForEachVisibleCell(this, colselector, rowIndex, length,
                               function (cell, row, col) {
                                 if ( typeof cell !== 'undefined' && cell !== null ) {

                                   var colspan = getColspan (cell);
                                   var rowspan = getRowspan (cell);

                                   var cellValue = parseString(cell, row, col) || " ";

                                   if ( colspan > 1 || rowspan > 1 ) {
                                     colspan = colspan || 1;
                                     rowspan = rowspan || 1;
                                     r.push({colSpan: colspan, rowSpan: rowspan, text: cellValue});
                                   }
                                   else
                                     r.push(cellValue);
                                 }
                                 else
                                   r.push(" ");
                               });

            if ( r.length )
              body.push(r);

            if ( rlength < r.length )
              rlength = r.length;

            rowIndex++;
          });

          return rlength;
        };

        $hrows = $(this).find('thead').first().find(defaults.theadSelector);

        var colcount = CollectPdfmakeData($hrows, 'th,td', $hrows.length);

        for ( var i = widths.length; i < colcount; i++ )
          widths.push("*");

        // Data
        $rows = collectRows ($(this));

        CollectPdfmakeData($rows, 'th,td', $hrows.length + $rows.length);

        var docDefinition = {
          content: [{
            table: {
              headerRows: $hrows.length,
              widths:     widths,
              body:       body
            }
          }]
        };

        $.extend(true, docDefinition, defaults.pdfmake.docDefinition);

        pdfMake.fonts = {
          Roboto: {
            normal:      'Roboto-Regular.ttf',
            bold:        'Roboto-Medium.ttf',
            italics:     'Roboto-Italic.ttf',
            bolditalics: 'Roboto-MediumItalic.ttf'
          }
        };

        $.extend(true, pdfMake.fonts, defaults.pdfmake.fonts);

        pdfMake.createPdf(docDefinition).getBuffer(function (buffer) {

          try {
            var blob = new Blob([buffer], {type: "application/pdf"});
            saveAs(blob, defaults.fileName + '.pdf');
          }
          catch (e) {
            downloadFile(defaults.fileName + '.pdf',
              'data:application/pdf;base64,',
              buffer);
          }
        });

      }
      else if ( defaults.jspdf.autotable === false ) {
        // pdf output using jsPDF's core html support

        var addHtmlOptions = {
          dim:       {
            w: getPropertyUnitValue($(el).first().get(0), 'width', 'mm'),
            h: getPropertyUnitValue($(el).first().get(0), 'height', 'mm')
          },
          pagesplit: false
        };

        var doc = new jsPDF(defaults.jspdf.orientation, defaults.jspdf.unit, defaults.jspdf.format);
        doc.addHTML($(el).first(),
                    defaults.jspdf.margins.left,
                    defaults.jspdf.margins.top,
                    addHtmlOptions,
                    function () {
                      jsPdfOutput(doc, false);
                    });
        //delete doc;
      }
      else {
        // pdf output using jsPDF AutoTable plugin
        // https://github.com/simonbengtsson/jsPDF-AutoTable

        var teOptions = defaults.jspdf.autotable.tableExport;

        // When setting jspdf.format to 'bestfit' tableExport tries to choose
        // the minimum required paper format and orientation in which the table
        // (or tables in multitable mode) completely fits without column adjustment
        if ( typeof defaults.jspdf.format === 'string' && defaults.jspdf.format.toLowerCase() === 'bestfit' ) {
          var pageFormats = {
            'a0': [2383.94, 3370.39], 'a1': [1683.78, 2383.94],
            'a2': [1190.55, 1683.78], 'a3': [841.89, 1190.55],
            'a4': [595.28, 841.89]
          };
          var rk = '', ro = '';
          var mw = 0;

          $(el).each(function () {
            if ( isVisible($(this)) ) {
              var w = getPropertyUnitValue($(this).get(0), 'width', 'pt');

              if ( w > mw ) {
                if ( w > pageFormats.a0[0] ) {
                  rk = 'a0';
                  ro = 'l';
                }
                for ( var key in pageFormats ) {
                  if ( pageFormats.hasOwnProperty(key) ) {
                    if ( pageFormats[key][1] > w ) {
                      rk = key;
                      ro = 'l';
                      if ( pageFormats[key][0] > w )
                        ro = 'p';
                    }
                  }
                }
                mw = w;
              }
            }
          });
          defaults.jspdf.format      = (rk === '' ? 'a4' : rk);
          defaults.jspdf.orientation = (ro === '' ? 'w' : ro);
        }

        // The jsPDF doc object is stored in defaults.jspdf.autotable.tableExport,
        // thus it can be accessed from any callback function
        if ( teOptions.doc == null ) {
          teOptions.doc = new jsPDF(defaults.jspdf.orientation,
                                    defaults.jspdf.unit,
                                    defaults.jspdf.format);

          if ( typeof defaults.jspdf.onDocCreated === 'function' )
            defaults.jspdf.onDocCreated(teOptions.doc);
        }

        if ( teOptions.outputImages === true )
          teOptions.images = {};

        if ( typeof teOptions.images != 'undefined' ) {
          $(el).filter(function () {
            return isVisible($(this));
          }).each(function () {
            var rowCount = 0;
            ranges       = [];

            if ( defaults.exportHiddenCells === false ) {
              $hiddenTableElements = $(this).find("tr, th, td").filter(":hidden");
              checkCellVisibilty = $hiddenTableElements.length > 0;
            }

            $hrows = $(this).find('thead').find(defaults.theadSelector);
            $rows = collectRows ($(this));

            $($rows).each(function () {
              ForEachVisibleCell(this, 'td,th', $hrows.length + rowCount, $hrows.length + $rows.length,
                                 function (cell) {
                                   if ( typeof cell !== 'undefined' && cell !== null ) {
                                     var kids = $(cell).children();
                                     if ( typeof kids != 'undefined' && kids.length > 0 )
                                       collectImages(cell, kids, teOptions);
                                   }
                                 });
              rowCount++;
            });
          });

          $hrows = [];
          $rows  = [];
        }

        loadImages(teOptions, function () {
          $(el).filter(function () {
            return isVisible($(this));
          }).each(function () {
            var colKey;
            rowIndex = 0;
            ranges   = [];

            if ( defaults.exportHiddenCells === false ) {
              $hiddenTableElements = $(this).find("tr, th, td").filter(":hidden");
              checkCellVisibilty = $hiddenTableElements.length > 0;
            }

            colNames = GetColumnNames(this);

            teOptions.columns    = [];
            teOptions.rows       = [];
            teOptions.rowoptions = {};

            // onTable: optional callback function for every matching table that can be used
            // to modify the tableExport options or to skip the output of a particular table
            // if the table selector targets multiple tables
            if ( typeof teOptions.onTable === 'function' )
              if ( teOptions.onTable($(this), defaults) === false )
                return true; // continue to next iteration step (table)

            // each table works with an own copy of AutoTable options
            defaults.jspdf.autotable.tableExport = null;  // avoid deep recursion error
            var atOptions                        = $.extend(true, {}, defaults.jspdf.autotable);
            defaults.jspdf.autotable.tableExport = teOptions;

            atOptions.margin = {};
            $.extend(true, atOptions.margin, defaults.jspdf.margins);
            atOptions.tableExport = teOptions;

            // Fix jsPDF Autotable's row height calculation
            if ( typeof atOptions.beforePageContent !== 'function' ) {
              atOptions.beforePageContent = function (data) {
                if ( data.pageCount == 1 ) {
                  var all = data.table.rows.concat(data.table.headerRow);
                  $.each(all, function () {
                    var row = this;
                    if ( row.height > 0 ) {
                      row.height += (2 - FONT_ROW_RATIO) / 2 * row.styles.fontSize;
                      data.table.height += (2 - FONT_ROW_RATIO) / 2 * row.styles.fontSize;
                    }
                  });
                }
              };
            }

            if ( typeof atOptions.createdHeaderCell !== 'function' ) {
              // apply some original css styles to pdf header cells
              atOptions.createdHeaderCell = function (cell, data) {

                // jsPDF AutoTable plugin v2.0.14 fix: each cell needs its own styles object
                cell.styles = $.extend({}, data.row.styles);

                if ( typeof teOptions.columns [data.column.dataKey] != 'undefined' ) {
                  var col = teOptions.columns [data.column.dataKey];

                  if ( typeof col.rect != 'undefined' ) {
                    var rh;

                    cell.contentWidth = col.rect.width;

                    if ( typeof teOptions.heightRatio == 'undefined' || teOptions.heightRatio === 0 ) {
                      if ( data.row.raw [data.column.dataKey].rowspan )
                        rh = data.row.raw [data.column.dataKey].rect.height / data.row.raw [data.column.dataKey].rowspan;
                      else
                        rh = data.row.raw [data.column.dataKey].rect.height;

                      teOptions.heightRatio = cell.styles.rowHeight / rh;
                    }

                    rh = data.row.raw [data.column.dataKey].rect.height * teOptions.heightRatio;
                    if ( rh > cell.styles.rowHeight )
                      cell.styles.rowHeight = rh;
                  }

                  if ( typeof col.style != 'undefined' && col.style.hidden !== true ) {
                    cell.styles.halign = col.style.align;
                    if ( atOptions.styles.fillColor === 'inherit' )
                      cell.styles.fillColor = col.style.bcolor;
                    if ( atOptions.styles.textColor === 'inherit' )
                      cell.styles.textColor = col.style.color;
                    if ( atOptions.styles.fontStyle === 'inherit' )
                      cell.styles.fontStyle = col.style.fstyle;
                  }
                }
              };
            }

            if ( typeof atOptions.createdCell !== 'function' ) {
              // apply some original css styles to pdf table cells
              atOptions.createdCell = function (cell, data) {
                var rowopt = teOptions.rowoptions [data.row.index + ":" + data.column.dataKey];

                if ( typeof rowopt != 'undefined' &&
                  typeof rowopt.style != 'undefined' &&
                  rowopt.style.hidden !== true ) {
                  cell.styles.halign = rowopt.style.align;
                  if ( atOptions.styles.fillColor === 'inherit' )
                    cell.styles.fillColor = rowopt.style.bcolor;
                  if ( atOptions.styles.textColor === 'inherit' )
                    cell.styles.textColor = rowopt.style.color;
                  if ( atOptions.styles.fontStyle === 'inherit' )
                    cell.styles.fontStyle = rowopt.style.fstyle;
                }
              };
            }

            if ( typeof atOptions.drawHeaderCell !== 'function' ) {
              atOptions.drawHeaderCell = function (cell, data) {
                var colopt = teOptions.columns [data.column.dataKey];

                if ( (colopt.style.hasOwnProperty("hidden") !== true || colopt.style.hidden !== true) &&
                  colopt.rowIndex >= 0 )
                  return prepareAutoTableText(cell, data, colopt);
                else
                  return false; // cell is hidden
              };
            }

            if ( typeof atOptions.drawCell !== 'function' ) {
              atOptions.drawCell = function (cell, data) {
                var rowopt = teOptions.rowoptions [data.row.index + ":" + data.column.dataKey];
                if ( prepareAutoTableText(cell, data, rowopt) ) {

                  teOptions.doc.rect(cell.x, cell.y, cell.width, cell.height, cell.styles.fillStyle);

                  if ( typeof rowopt != 'undefined' && typeof rowopt.kids != 'undefined' && rowopt.kids.length > 0 ) {

                    var dh = cell.height / rowopt.rect.height;
                    if ( dh > teOptions.dh || typeof teOptions.dh == 'undefined' )
                      teOptions.dh = dh;
                    teOptions.dw = cell.width / rowopt.rect.width;

                    var y = cell.textPos.y;
                    drawAutotableElements(cell, rowopt.kids, teOptions);
                    cell.textPos.y = y;
                    drawAutotableText(cell, rowopt.kids, teOptions);
                  }
                  else
                    drawAutotableText(cell, {}, teOptions);
                }
                return false;
              };
            }

            // collect header and data rows
            teOptions.headerrows = [];
            $hrows = $(this).find('thead').find(defaults.theadSelector);
            $hrows.each(function () {
              colKey = 0;
              teOptions.headerrows[rowIndex] = [];

              ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                                 function (cell, row, col) {
                                   var obj      = getCellStyles(cell);
                                   obj.title    = parseString(cell, row, col);
                                   obj.key      = colKey++;
                                   obj.rowIndex = rowIndex;
                                   teOptions.headerrows[rowIndex].push(obj);
                                 });
              rowIndex++;
            });

            if ( rowIndex > 0 ) {
              // iterate through last row
              var lastrow = rowIndex - 1;
              while ( lastrow >= 0 ) {
                $.each(teOptions.headerrows[lastrow], function () {
                  var obj = this;

                  if ( lastrow > 0 && this.rect === null )
                    obj = teOptions.headerrows[lastrow - 1][this.key];

                  if ( obj !== null && obj.rowIndex >= 0 &&
                    (obj.style.hasOwnProperty("hidden") !== true || obj.style.hidden !== true) )
                    teOptions.columns.push(obj);
                });

                lastrow = (teOptions.columns.length > 0) ? -1 : lastrow - 1;
              }
            }

            var rowCount = 0;
            $rows        = [];
            $rows = collectRows ($(this));
            $($rows).each(function () {
              var rowData = [];
              colKey      = 0;

              ForEachVisibleCell(this, 'td,th', rowIndex, $hrows.length + $rows.length,
                                 function (cell, row, col) {
                                   var obj;

                                   if ( typeof teOptions.columns[colKey] === 'undefined' ) {
                                     // jsPDF-Autotable needs columns. Thus define hidden ones for tables without thead
                                     obj = {
                                       title: '',
                                       key:   colKey,
                                       style: {
                                         hidden: true
                                       }
                                     };
                                     teOptions.columns.push(obj);
                                   }
                                   if ( typeof cell !== 'undefined' && cell !== null ) {
                                     obj = getCellStyles(cell);
                                     obj.kids = $(cell).children();
                                     teOptions.rowoptions [rowCount + ":" + colKey++] = obj;
                                   }
                                   else {
                                     obj = $.extend(true, {}, teOptions.rowoptions [rowCount + ":" + (colKey - 1)]);
                                     obj.colspan = -1;
                                     teOptions.rowoptions [rowCount + ":" + colKey++] = obj;
                                   }

                                   rowData.push(parseString(cell, row, col));
                                 });
              if ( rowData.length ) {
                teOptions.rows.push(rowData);
                rowCount++;
              }
              rowIndex++;
            });

            // onBeforeAutotable: optional callback function before calling
            // jsPDF AutoTable that can be used to modify the AutoTable options
            if ( typeof teOptions.onBeforeAutotable === 'function' )
              teOptions.onBeforeAutotable($(this), teOptions.columns, teOptions.rows, atOptions);

            teOptions.doc.autoTable(teOptions.columns, teOptions.rows, atOptions);

            // onAfterAutotable: optional callback function after returning
            // from jsPDF AutoTable that can be used to modify the AutoTable options
            if ( typeof teOptions.onAfterAutotable === 'function' )
              teOptions.onAfterAutotable($(this), atOptions);

            // set the start position for the next table (in case there is one)
            defaults.jspdf.autotable.startY = teOptions.doc.autoTableEndPosY() + atOptions.margin.top;

          });

          jsPdfOutput(teOptions.doc, (typeof teOptions.images != 'undefined' && jQuery.isEmptyObject(teOptions.images) === false));

          if ( typeof teOptions.headerrows != 'undefined' )
            teOptions.headerrows.length = 0;
          if ( typeof teOptions.columns != 'undefined' )
            teOptions.columns.length = 0;
          if ( typeof teOptions.rows != 'undefined' )
            teOptions.rows.length = 0;
          delete teOptions.doc;
          teOptions.doc = null;
        });
      }
    }

    /*
    function FindColObject (objects, colIndex, rowIndex) {
      var result = null;
      $.each(objects, function () {
        if ( this.rowIndex == rowIndex && this.key == colIndex ) {
          result = this;
          return false;
        }
      });
      return result;
    }
    */
    function collectRows ($table) {
      var result = [];
      findTablePart($table,'tbody').each(function () {
        result.push.apply(result, findRows($(this), defaults.tbodySelector).toArray());
      });
      if ( defaults.tfootSelector.length ) {
        findTablePart($table,'tfoot').each(function () {
          result.push.apply(result, findRows($(this), defaults.tfootSelector).toArray());
        });
      }
      return result;
    }

    function findTablePart ($table, type) {
      var tl = $table.parents('table').length;
      return $table.find(type).filter (function () {
        return $(this).closest('table').parents('table').length === tl;
      });
    }

    function findRows ($tpart, rowSelector) {
      return $tpart.find(rowSelector).filter (function () {
        return (defaults.maxNestedTables == 0 ||
          ($(this).find('table').length < defaults.maxNestedTables &&
            $(this).parents('table').length <= defaults.maxNestedTables));
      });
    }

    function GetColumnNames (table) {
      var result = [];
      $(table).find('thead').first().find('th').each(function (index, el) {
        if ( $(el).attr("data-field") !== undefined )
          result[index] = $(el).attr("data-field");
        else
          result[index] = index.toString();
      });
      return result;
    }

    function isVisible ($element) {
      var isCell = typeof $element[0].cellIndex !== 'undefined';
      var isRow = typeof $element[0].rowIndex !== 'undefined';
      var isElementVisible = (isCell || isRow) ? isTableElementVisible($element) : $element.is(':visible');
      var tableexportDisplay = $element.data("tableexport-display");

      if (isCell && tableexportDisplay != 'none' && tableexportDisplay != 'always') {
        $element = $($element[0].parentNode);
        isRow = typeof $element[0].rowIndex !== 'undefined';
        tableexportDisplay = $element.data("tableexport-display");
      }
      if (isRow && tableexportDisplay != 'none' && tableexportDisplay != 'always') {
        tableexportDisplay = $element.closest('table').data("tableexport-display");
      }

      return tableexportDisplay !== 'none' && (isElementVisible == true || tableexportDisplay == 'always');
    }

    function isTableElementVisible ($element) {
      var hiddenEls = [];

      if ( checkCellVisibilty ) {
        hiddenEls = $hiddenTableElements.filter (function () {
          var found = false;

          if (this.nodeType == $element[0].nodeType) {
            if (typeof this.rowIndex !== 'undefined' && this.rowIndex == $element[0].rowIndex)
              found = true;
            else if (typeof this.cellIndex !== 'undefined' && this.cellIndex == $element[0].cellIndex &&
              typeof this.parentNode.rowIndex !== 'undefined' &&
              typeof $element[0].parentNode.rowIndex !== 'undefined' &&
              this.parentNode.rowIndex == $element[0].parentNode.rowIndex)
              found = true;
          }
          return found;
        });
      }
      return (checkCellVisibilty == false || hiddenEls.length == 0);
    }

    function isColumnIgnored ($cell, rowLength, colIndex) {
      var result = false;

      if (isVisible($cell)) {
        if ( defaults.ignoreColumn.length > 0 ) {
          if ( $.inArray(colIndex, defaults.ignoreColumn) != -1 ||
            $.inArray(colIndex - rowLength, defaults.ignoreColumn) != -1 ||
            (colNames.length > colIndex && typeof colNames[colIndex] != 'undefined' &&
              $.inArray(colNames[colIndex], defaults.ignoreColumn) != -1) )
            result = true;
        }
      }
      else
        result = true;

      return result;
    }

    function ForEachVisibleCell (tableRow, selector, rowIndex, rowCount, cellcallback) {
      if ( typeof (cellcallback) === 'function' ) {
        var ignoreRow = false;

        if (typeof defaults.onIgnoreRow === 'function')
          ignoreRow = defaults.onIgnoreRow($(tableRow), rowIndex);

        if (ignoreRow === false &&
          $.inArray(rowIndex, defaults.ignoreRow) == -1 &&
          $.inArray(rowIndex - rowCount, defaults.ignoreRow) == -1 &&
          isVisible($(tableRow))) {

          var $cells = $(tableRow).find(selector);
          var cellCount = 0;

          $cells.each(function (colIndex) {
            var $cell = $(this);
            var c;
            var colspan = getColspan (this);
            var rowspan = getRowspan (this);

            // Skip ranges
            $.each(ranges, function () {
              var range = this;
              if ( rowIndex >= range.s.r && rowIndex <= range.e.r && cellCount >= range.s.c && cellCount <= range.e.c ) {
                for ( c = 0; c <= range.e.c - range.s.c; ++c )
                  cellcallback(null, rowIndex, cellCount++);
              }
            });

            if ( isColumnIgnored($cell, $cells.length, colIndex) === false ) {
              // Handle Row Span
              if ( rowspan || colspan ) {
                rowspan = rowspan || 1;
                colspan = colspan || 1;
                ranges.push({
                              s: {r: rowIndex, c: cellCount},
                              e: {r: rowIndex + rowspan - 1, c: cellCount + colspan - 1}
                            });
              }

              // Handle Value
              cellcallback(this, rowIndex, cellCount++);
            }

            // Handle Colspan
            if ( colspan )
              for ( c = 0; c < colspan - 1; ++c )
                cellcallback(null, rowIndex, cellCount++);
          });

          // Skip ranges
          $.each(ranges, function () {
            var range = this;
            if ( rowIndex >= range.s.r && rowIndex <= range.e.r && cellCount >= range.s.c && cellCount <= range.e.c ) {
              for ( c = 0; c <= range.e.c - range.s.c; ++c )
                cellcallback(null, rowIndex, cellCount++);
            }
          });
        }
      }
    }

    function jsPdfOutput (doc, hasimages) {
      if ( defaults.consoleLog === true )
        console.log(doc.output());

      if ( defaults.outputMode === 'string' )
        return doc.output();

      if ( defaults.outputMode === 'base64' )
        return base64encode(doc.output());

      if ( defaults.outputMode === 'window' ) {
        window.URL = window.URL || window.webkitURL;
        window.open(window.URL.createObjectURL(doc.output("blob")));
        return;
      }

      try {
        var blob = doc.output('blob');
        saveAs(blob, defaults.fileName + '.pdf');
      }
      catch (e) {
        downloadFile(defaults.fileName + '.pdf',
          'data:application/pdf' + (hasimages ? '' : ';base64') + ',',
          hasimages ? doc.output('blob') : doc.output());
      }
    }

    function prepareAutoTableText (cell, data, cellopt) {
      var cs = 0;
      if ( typeof cellopt !== 'undefined' )
        cs = cellopt.colspan;

      if ( cs >= 0 ) {
        // colspan handling
        var cellWidth = cell.width;
        var textPosX  = cell.textPos.x;
        var i         = data.table.columns.indexOf(data.column);

        for ( var c = 1; c < cs; c++ ) {
          var column = data.table.columns[i + c];
          cellWidth += column.width;
        }

        if ( cs > 1 ) {
          if ( cell.styles.halign === 'right' )
            textPosX = cell.textPos.x + cellWidth - cell.width;
          else if ( cell.styles.halign === 'center' )
            textPosX = cell.textPos.x + (cellWidth - cell.width) / 2;
        }

        cell.width     = cellWidth;
        cell.textPos.x = textPosX;

        if ( typeof cellopt !== 'undefined' && cellopt.rowspan > 1 )
          cell.height = cell.height * cellopt.rowspan;

        // fix jsPDF's calculation of text position
        if ( cell.styles.valign === 'middle' || cell.styles.valign === 'bottom' ) {
          var splittedText = typeof cell.text === 'string' ? cell.text.split(/\r\n|\r|\n/g) : cell.text;
          var lineCount    = splittedText.length || 1;
          if ( lineCount > 2 )
            cell.textPos.y -= ((2 - FONT_ROW_RATIO) / 2 * data.row.styles.fontSize) * (lineCount - 2) / 3;
        }
        return true;
      }
      else
        return false; // cell is hidden (colspan = -1), don't draw it
    }

    function collectImages (cell, elements, teOptions) {
      if ( typeof teOptions.images != 'undefined' ) {
        elements.each(function () {
          var kids = $(this).children();

          if ( $(this).is("img") ) {
            var hash = strHashCode(this.src);

            teOptions.images[hash] = {
              url: this.src,
              src: this.src
            };
          }

          if ( typeof kids != 'undefined' && kids.length > 0 )
            collectImages(cell, kids, teOptions);
        });
      }
    }

    function loadImages (teOptions, callback) {
      var i;
      var imageCount = 0;
      var x          = 0;

      function done () {
        callback(imageCount);
      }

      function loadImage (image) {
        if ( !image.url )
          return;
        var img         = new Image();
        imageCount      = ++x;
        img.crossOrigin = 'Anonymous';
        img.onerror     = img.onload = function () {
          if ( img.complete ) {

            if ( img.src.indexOf('data:image/') === 0 ) {
              img.width  = image.width || img.width || 0;
              img.height = image.height || img.height || 0;
            }

            if ( img.width + img.height ) {
              var canvas = document.createElement("canvas");
              var ctx    = canvas.getContext("2d");

              canvas.width  = img.width;
              canvas.height = img.height;
              ctx.drawImage(img, 0, 0);

              image.src = canvas.toDataURL("image/jpeg");
            }
          }
          if ( !--x )
            done();
        };
        img.src = image.url;
      }

      if ( typeof teOptions.images != 'undefined' ) {
        for ( i in teOptions.images )
          if ( teOptions.images.hasOwnProperty(i) )
            loadImage(teOptions.images[i]);
      }

      return x || done();
    }

    function drawAutotableElements (cell, elements, teOptions) {
      elements.each(function () {
        var kids = $(this).children();
        var uy   = 0;

        if ( $(this).is("div") ) {
          var bcolor = rgb2array(getStyle(this, 'background-color'), [255, 255, 255]);
          var lcolor = rgb2array(getStyle(this, 'border-top-color'), [0, 0, 0]);
          var lwidth = getPropertyUnitValue(this, 'border-top-width', defaults.jspdf.unit);

          var r  = this.getBoundingClientRect();
          var ux = this.offsetLeft * teOptions.dw;
          uy = this.offsetTop * teOptions.dh;
          var uw = r.width * teOptions.dw;
          var uh = r.height * teOptions.dh;

          teOptions.doc.setDrawColor.apply(undefined, lcolor);
          teOptions.doc.setFillColor.apply(undefined, bcolor);
          teOptions.doc.setLineWidth(lwidth);
          teOptions.doc.rect(cell.x + ux, cell.y + uy, uw, uh, lwidth ? "FD" : "F");
        }
        else if ( $(this).is("img") ) {
          if ( typeof teOptions.images != 'undefined' ) {
            var hash  = strHashCode(this.src);
            var image = teOptions.images[hash];

            if ( typeof image != 'undefined' ) {

              var arCell    = cell.width / cell.height;
              var arImg     = this.width / this.height;
              var imgWidth  = cell.width;
              var imgHeight = cell.height;
              var px2pt     = 0.264583 * 72 / 25.4;

              if ( arImg <= arCell ) {
                imgHeight = Math.min(cell.height, this.height);
                imgWidth  = this.width * imgHeight / this.height;
              }
              else if ( arImg > arCell ) {
                imgWidth  = Math.min(cell.width, this.width);
                imgHeight = this.height * imgWidth / this.width;
              }

              imgWidth *= px2pt;
              imgHeight *= px2pt;

              if ( imgHeight < cell.height )
                uy = (cell.height - imgHeight) / 2;

              try {
                teOptions.doc.addImage(image.src, cell.textPos.x, cell.y + uy, imgWidth, imgHeight);
              }
              catch (e) {
                // TODO: IE -> convert png to jpeg
              }
              cell.textPos.x += imgWidth;
            }
          }
        }

        if ( typeof kids != 'undefined' && kids.length > 0 )
          drawAutotableElements(cell, kids, teOptions);
      });
    }

    function drawAutotableText (cell, texttags, teOptions) {
      if ( typeof teOptions.onAutotableText === 'function' ) {
        teOptions.onAutotableText(teOptions.doc, cell, texttags);
      }
      else {
        var x     = cell.textPos.x;
        var y     = cell.textPos.y;
        var style = {halign: cell.styles.halign, valign: cell.styles.valign};

        if ( texttags.length ) {
          var tag = texttags[0];
          while ( tag.previousSibling )
            tag = tag.previousSibling;

          var b = false, i = false;

          while ( tag ) {
            var txt = tag.innerText || tag.textContent || "";

            txt = ((txt.length && txt[0] == " ") ? " " : "") +
              $.trim(txt) +
              ((txt.length > 1 && txt[txt.length - 1] == " ") ? " " : "");

            if ( $(tag).is("br") ) {
              x = cell.textPos.x;
              y += teOptions.doc.internal.getFontSize();
            }

            if ( $(tag).is("b") )
              b = true;
            else if ( $(tag).is("i") )
              i = true;

            if ( b || i )
              teOptions.doc.setFontType((b && i) ? "bolditalic" : b ? "bold" : "italic");

            var w = teOptions.doc.getStringUnitWidth(txt) * teOptions.doc.internal.getFontSize();

            if ( w ) {
              if ( cell.styles.overflow === 'linebreak' &&
                x > cell.textPos.x && (x + w) > (cell.textPos.x + cell.width) ) {
                var chars = ".,!%*;:=-";
                if ( chars.indexOf(txt.charAt(0)) >= 0 ) {
                  var s = txt.charAt(0);
                  w     = teOptions.doc.getStringUnitWidth(s) * teOptions.doc.internal.getFontSize();
                  if ( (x + w) <= (cell.textPos.x + cell.width) ) {
                    teOptions.doc.autoTableText(s, x, y, style);
                    txt = txt.substring(1, txt.length);
                  }
                  w = teOptions.doc.getStringUnitWidth(txt) * teOptions.doc.internal.getFontSize();
                }
                x = cell.textPos.x;
                y += teOptions.doc.internal.getFontSize();
              }

              while ( txt.length && (x + w) > (cell.textPos.x + cell.width) ) {
                txt = txt.substring(0, txt.length - 1);
                w   = teOptions.doc.getStringUnitWidth(txt) * teOptions.doc.internal.getFontSize();
              }

              teOptions.doc.autoTableText(txt, x, y, style);
              x += w;
            }

            if ( b || i ) {
              if ( $(tag).is("b") )
                b = false;
              else if ( $(tag).is("i") )
                i = false;

              teOptions.doc.setFontType((!b && !i) ? "normal" : b ? "bold" : "italic");
            }

            tag = tag.nextSibling;
          }
          cell.textPos.x = x;
          cell.textPos.y = y;
        }
        else {
          teOptions.doc.autoTableText(cell.text, cell.textPos.x, cell.textPos.y, style);
        }
      }
    }

    function escapeRegExp (string) {
      return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
    }

    function replaceAll (string, find, replace) {
      return string.replace(new RegExp(escapeRegExp(find), 'g'), replace);
    }

    function parseNumber (value) {
      value = value || "0";
      value = replaceAll(value, defaults.numbers.html.thousandsSeparator, '');
      value = replaceAll(value, defaults.numbers.html.decimalMark, '.');

      return typeof value === "number" || jQuery.isNumeric(value) !== false ? value : false;
    }

    function parsePercent (value) {
      if ( value.indexOf("%") > -1 ) {
        value = parseNumber(value.replace(/%/g, ""));
        if ( value !== false )
          value = value / 100;
      }
      else
        value = false;
      return value;
    }

    function parseString (cell, rowIndex, colIndex) {
      var result = '';

      if ( cell !== null ) {
        var $cell = $(cell);
        var htmlData;

        if ( $cell[0].hasAttribute("data-tableexport-value") ) {
          htmlData = $cell.data("tableexport-value");
          htmlData = htmlData ? htmlData + '' : ''
        }
        else {
          htmlData = $cell.html();

          if ( typeof defaults.onCellHtmlData === 'function' )
            htmlData = defaults.onCellHtmlData($cell, rowIndex, colIndex, htmlData);
          else if ( htmlData != '' ) {
            var html      = $.parseHTML(htmlData);
            var inputidx  = 0;
            var selectidx = 0;

            htmlData = '';
            $.each(html, function () {
              if ( $(this).is("input") )
                htmlData += $cell.find('input').eq(inputidx++).val();
              else if ( $(this).is("select") )
                htmlData += $cell.find('select option:selected').eq(selectidx++).text();
              else {
                if ( typeof $(this).html() === 'undefined' )
                  htmlData += $(this).text();
                else if ( jQuery().bootstrapTable === undefined ||
                  ($(this).hasClass('filterControl') !== true &&
                    $(cell).parents('.detail-view').length === 0) )
                  htmlData += $(this).html();
              }
            });
          }
        }

        if ( defaults.htmlContent === true ) {
          result = $.trim(htmlData);
        }
        else if ( htmlData && htmlData != '' ) {
          var cellFormat = $(cell).data("tableexport-cellformat");

          if ( cellFormat != '' ) {
            var text   = htmlData.replace(/\n/g, '\u2028').replace(/<br\s*[\/]?>/gi, '\u2060');
            var obj    = $('<div/>').html(text).contents();
            var number = false;
            text       = '';
            $.each(obj.text().split("\u2028"), function (i, v) {
              if ( i > 0 )
                text += " ";
              text += $.trim(v);
            });

            $.each(text.split("\u2060"), function (i, v) {
              if ( i > 0 )
                result += "\n";
              result += $.trim(v).replace(/\u00AD/g, ""); // remove soft hyphens
            });

            if ( defaults.type == 'json' ||
              (defaults.type === 'excel' && defaults.excelFileFormat === 'xmlss') ||
              defaults.numbers.output === false ) {
              number = parseNumber(result);

              if ( number !== false )
                result = Number(number);
            }
            else if ( defaults.numbers.html.decimalMark != defaults.numbers.output.decimalMark ||
              defaults.numbers.html.thousandsSeparator != defaults.numbers.output.thousandsSeparator ) {
              number = parseNumber(result);

              if ( number !== false ) {
                var frac = ("" + number.substr(number < 0 ? 1 : 0)).split('.');
                if ( frac.length == 1 )
                  frac[1] = "";
                var mod = frac[0].length > 3 ? frac[0].length % 3 : 0;

                result = (number < 0 ? "-" : "") +
                  (defaults.numbers.output.thousandsSeparator ? ((mod ? frac[0].substr(0, mod) + defaults.numbers.output.thousandsSeparator : "") + frac[0].substr(mod).replace(/(\d{3})(?=\d)/g, "$1" + defaults.numbers.output.thousandsSeparator)) : frac[0]) +
                  (frac[1].length ? defaults.numbers.output.decimalMark + frac[1] : "");
              }
            }
          }
          else
            result = htmlData;
        }

        if ( defaults.escape === true ) {
          //noinspection JSDeprecatedSymbols
          result = escape(result);
        }

        if ( typeof defaults.onCellData === 'function' ) {
          result = defaults.onCellData($cell, rowIndex, colIndex, result);
        }
      }

      return result;
    }

    //noinspection JSUnusedLocalSymbols
    function hyphenate (a, b, c) {
      return b + "-" + c.toLowerCase();
    }

    function rgb2array (rgb_string, default_result) {
      var re     = /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/;
      var bits   = re.exec(rgb_string);
      var result = default_result;
      if ( bits )
        result = [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];
      return result;
    }

    function getCellStyles (cell) {
      var a  = getStyle(cell, 'text-align');
      var fw = getStyle(cell, 'font-weight');
      var fs = getStyle(cell, 'font-style');
      var f  = '';
      if ( a == 'start' )
        a = getStyle(cell, 'direction') == 'rtl' ? 'right' : 'left';
      if ( fw >= 700 )
        f = 'bold';
      if ( fs == 'italic' )
        f += fs;
      if ( f === '' )
        f = 'normal';

      var result = {
        style:   {
          align:  a,
          bcolor: rgb2array(getStyle(cell, 'background-color'), [255, 255, 255]),
          color:  rgb2array(getStyle(cell, 'color'), [0, 0, 0]),
          fstyle: f
        },
        colspan: getColspan (cell),
        rowspan: getRowspan (cell)
      };

      if ( cell !== null ) {
        var r       = cell.getBoundingClientRect();
        result.rect = {
          width:  r.width,
          height: r.height
        };
      }

      return result;
    }

    function getColspan (cell) {
      var result = $(cell).data("tableexport-colspan");
      if ( typeof result == 'undefined' && $(cell).is("[colspan]") )
        result = $(cell).attr('colspan');

      return (parseInt(result) || 0);
    }

    function getRowspan (cell) {
      var result = $(cell).data("tableexport-rowspan");
      if ( typeof result == 'undefined' && $(cell).is("[rowspan]") )
        result = $(cell).attr('rowspan');

      return (parseInt(result) || 0);
    }

    // get computed style property
    function getStyle (target, prop) {
      try {
        if ( window.getComputedStyle ) { // gecko and webkit
          prop = prop.replace(/([a-z])([A-Z])/, hyphenate);  // requires hyphenated, not camel
          return window.getComputedStyle(target, null).getPropertyValue(prop);
        }
        if ( target.currentStyle ) { // ie
          return target.currentStyle[prop];
        }
        return target.style[prop];
      }
      catch (e) {
      }
      return "";
    }

    function getUnitValue (parent, value, unit) {
      var baseline = 100;  // any number serves

      var temp              = document.createElement("div");  // create temporary element
      temp.style.overflow   = "hidden";  // in case baseline is set too low
      temp.style.visibility = "hidden";  // no need to show it

      parent.appendChild(temp); // insert it into the parent for em, ex and %

      temp.style.width = baseline + unit;
      var factor       = baseline / temp.offsetWidth;

      parent.removeChild(temp);  // clean up

      return (value * factor);
    }

    function getPropertyUnitValue (target, prop, unit) {
      var value = getStyle(target, prop);  // get the computed style value

      var numeric = value.match(/\d+/);  // get the numeric component
      if ( numeric !== null ) {
        numeric = numeric[0];  // get the string

        return getUnitValue(target.parentElement, numeric, unit);
      }
      return 0;
    }

    function jx_Workbook () {
      if ( !(this instanceof jx_Workbook) ) {
        //noinspection JSPotentiallyInvalidConstructorUsage
        return new jx_Workbook();
      }
      this.SheetNames = [];
      this.Sheets     = {};
    }

    function jx_s2ab (s) {
      var buf  = new ArrayBuffer(s.length);
      var view = new Uint8Array(buf);
      for ( var i = 0; i != s.length; ++i ) view[i] = s.charCodeAt(i) & 0xFF;
      return buf;
    }

    function jx_datenum (v, date1904) {
      if ( date1904 ) v += 1462;
      var epoch = Date.parse(v);
      return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    }

    function jx_createSheet (data) {
      var ws    = {};
      var range = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0}};
      for ( var R = 0; R != data.length; ++R ) {
        for ( var C = 0; C != data[R].length; ++C ) {
          if ( range.s.r > R ) range.s.r = R;
          if ( range.s.c > C ) range.s.c = C;
          if ( range.e.r < R ) range.e.r = R;
          if ( range.e.c < C ) range.e.c = C;
          var cell = {v: data[R][C]};
          if ( cell.v === null ) continue;
          var cell_ref = XLSX.utils.encode_cell({c: C, r: R});

          if ( typeof cell.v === 'number' ) cell.t = 'n';
          else if ( typeof cell.v === 'boolean' ) cell.t = 'b';
          else if ( cell.v instanceof Date ) {
            cell.t = 'n';
            cell.z = XLSX.SSF._table[14];
            cell.v = jx_datenum(cell.v);
          }
          else cell.t = 's';
          ws[cell_ref] = cell;
        }
      }

      if ( range.s.c < 10000000 ) ws['!ref'] = XLSX.utils.encode_range(range);
      return ws;
    }

    function strHashCode (str) {
      var hash = 0, i, chr, len;
      if ( str.length === 0 ) return hash;
      for ( i = 0, len = str.length; i < len; i++ ) {
        chr  = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
      }
      return hash;
    }

    function downloadFile (filename, header, data) {
      var ua = window.navigator.userAgent;
      if ( filename !== false && window.navigator.msSaveOrOpenBlob ) {
        //noinspection JSUnresolvedFunction
        window.navigator.msSaveOrOpenBlob(new Blob([data]), filename);
      }
      else if ( filename !== false && (ua.indexOf("MSIE ") > 0 || !!ua.match(/Trident.*rv\:11\./)) ) {
        // Internet Explorer (<= 9) workaround by Darryl (https://github.com/dawiong/tableExport.jquery.plugin)
        // based on sampopes answer on http://stackoverflow.com/questions/22317951
        // ! Not working for json and pdf format !
        var frame = document.createElement("iframe");

        if ( frame ) {
          document.body.appendChild(frame);
          frame.setAttribute("style", "display:none");
          frame.contentDocument.open("txt/plain", "replace");
          frame.contentDocument.write(data);
          frame.contentDocument.close();
          frame.contentDocument.focus();

          var extension = filename.substr((filename.lastIndexOf('.') +1));
          switch(extension) {
            case 'doc': case 'json': case 'png': case 'pdf': case 'xls': case 'xlsx':
            filename += ".txt";
            break;
          }
          frame.contentDocument.execCommand("SaveAs", true, filename);
          document.body.removeChild(frame);
        }
      }
      else {
        var DownloadLink = document.createElement('a');

        if ( DownloadLink ) {
          var blobUrl = null;

          DownloadLink.style.display = 'none';
          if ( filename !== false )
            DownloadLink.download = filename;
          else
            DownloadLink.target = '_blank';

          if ( typeof data == 'object' ) {
            window.URL = window.URL || window.webkitURL;
            blobUrl = window.URL.createObjectURL(data);
            DownloadLink.href = blobUrl;
          }
          else if ( header.toLowerCase().indexOf("base64,") >= 0 )
            DownloadLink.href = header + base64encode(data);
          else
            DownloadLink.href = header + encodeURIComponent(data);

          document.body.appendChild(DownloadLink);

          if ( document.createEvent ) {
            if ( DownloadEvt === null )
              DownloadEvt = document.createEvent('MouseEvents');

            DownloadEvt.initEvent('click', true, false);
            DownloadLink.dispatchEvent(DownloadEvt);
          }
          else if ( document.createEventObject )
            DownloadLink.fireEvent('onclick');
          else if ( typeof DownloadLink.onclick == 'function' )
            DownloadLink.onclick();

          setTimeout(function(){
            if ( blobUrl )
              window.URL.revokeObjectURL(blobUrl);
            document.body.removeChild(DownloadLink);
          }, 100);
        }
      }
    }

    function utf8Encode (text) {
      if (typeof text === 'string') {
        text = text.replace(/\x0d\x0a/g, "\x0a");
        var utftext = "";
        for ( var n = 0; n < text.length; n++ ) {
          var c = text.charCodeAt(n);
          if ( c < 128 ) {
            utftext += String.fromCharCode(c);
          }
          else if ( (c > 127) && (c < 2048) ) {
            utftext += String.fromCharCode((c >> 6) | 192);
            utftext += String.fromCharCode((c & 63) | 128);
          }
          else {
            utftext += String.fromCharCode((c >> 12) | 224);
            utftext += String.fromCharCode(((c >> 6) & 63) | 128);
            utftext += String.fromCharCode((c & 63) | 128);
          }
        }
        return utftext;
      }
      return text;
    }

    function base64encode (input) {
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var output = "";
      var i      = 0;
      input      = utf8Encode(input);
      while ( i < input.length ) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;
        if ( isNaN(chr2) ) {
          enc3 = enc4 = 64;
        } else if ( isNaN(chr3) ) {
          enc4 = 64;
        }
        output = output +
          keyStr.charAt(enc1) + keyStr.charAt(enc2) +
          keyStr.charAt(enc3) + keyStr.charAt(enc4);
      }
      return output;
    }

    return this;
  }
})(jQuery);

/**
 * @author zhixin wen <wenzhixin2010@gmail.com>
 * extensions: https://github.com/kayalshri/tableExport.jquery.plugin
 */

(function ($) {
    'use strict';
    var sprintf = $.fn.bootstrapTable.utils.sprintf;

    var TYPE_NAME = {
        json: 'JSON',
        xml: 'XML',
        png: 'PNG',
        csv: 'CSV',
        txt: 'TXT',
        sql: 'SQL',
        doc: 'MS-Word',
        excel: 'MS-Excel',
        xlsx: 'MS-Excel (OpenXML)',
        powerpoint: 'MS-Powerpoint',
        pdf: 'PDF'
    };

    $.extend($.fn.bootstrapTable.defaults, {
        showExport: false,
        exportDataType: 'basic', // basic, all, selected
        // 'json', 'xml', 'png', 'csv', 'txt', 'sql', 'doc', 'excel', 'powerpoint', 'pdf'
        exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],
        exportOptions: {}
    });

    $.extend($.fn.bootstrapTable.defaults.icons, {
        export: 'glyphicon-export icon-share'
    });

    $.extend($.fn.bootstrapTable.locales, {
        formatExport: function () {
            return 'Export data';
        }
    });
    $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales);

    var BootstrapTable = $.fn.bootstrapTable.Constructor,
        _initToolbar = BootstrapTable.prototype.initToolbar;

    BootstrapTable.prototype.initToolbar = function () {
        this.showToolbar = this.showToolbar || this.options.showExport;

        _initToolbar.apply(this, Array.prototype.slice.apply(arguments));

        if (this.options.showExport) {
            var that = this,
                $btnGroup = this.$toolbar.find('>.btn-group'),
                $export = $btnGroup.find('div.export');

            if (!$export.length) {
                $export = $([
                    '<div class="export btn-group">',
                        '<button class="btn' +
                            sprintf(' btn-%s', this.options.buttonsClass) +
                            sprintf(' btn-%s', this.options.iconSize) +
                            ' dropdown-toggle" aria-label="export type" ' +
                            'title="' + this.options.formatExport() + '" ' +
                            'data-toggle="dropdown" type="button">',
                            sprintf('<i class="%s %s"></i> ', this.options.iconsPrefix, this.options.icons.export),
                            '<span class="caret"></span>',
                        '</button>',
                        '<ul class="dropdown-menu" role="menu">',
                        '</ul>',
                    '</div>'].join('')).appendTo($btnGroup);

                var $menu = $export.find('.dropdown-menu'),
                    exportTypes = this.options.exportTypes;

                if (typeof this.options.exportTypes === 'string') {
                    var types = this.options.exportTypes.slice(1, -1).replace(/ /g, '').split(',');

                    exportTypes = [];
                    $.each(types, function (i, value) {
                        exportTypes.push(value.slice(1, -1));
                    });
                }
                $.each(exportTypes, function (i, type) {
                    if (TYPE_NAME.hasOwnProperty(type)) {
                        $menu.append(['<li role="menuitem" data-type="' + type + '">',
                                '<a href="javascript:void(0)">',
                                    TYPE_NAME[type],
                                '</a>',
                            '</li>'].join(''));
                    }
                });

                $menu.find('li').click(function () {
                    var type = $(this).data('type'),
                        doExport = function () {

                            if (!!that.options.exportFooter) {
                                var data = that.getData();
                                var $footerRow = that.$tableFooter.find("tr").first();

                                var footerData = { };
                                var footerHtml = [];

                                $.each($footerRow.children(), function (index, footerCell) {

                                    var footerCellHtml = $(footerCell).children(".th-inner").first().html();
                                    footerData[that.columns[index].field] = footerCellHtml == '&nbsp;' ? null : footerCellHtml;

                                    // grab footer cell text into cell index-based array
                                    footerHtml.push(footerCellHtml);
                                });

                                that.append(footerData);

                                var $lastTableRow = that.$body.children().last();

                                $.each($lastTableRow.children(), function (index, lastTableRowCell) {

                                    $(lastTableRowCell).html(footerHtml[index]);
                                });
                            }

                            that.$el.tableExport($.extend({}, that.options.exportOptions, {
                                type: type,
                                escape: false
                            }));

                            if (!!that.options.exportFooter) {
                                that.load(data);
                            }
                        };

                    var stateField = that.header.stateField;

                    if (that.options.exportDataType === 'all' && that.options.pagination) {
                        that.$el.one(that.options.sidePagination === 'server' ? 'post-body.bs.table' : 'page-change.bs.table', function () {
                            if (stateField) {
                                that.hideColumn(stateField);
                            }
                            doExport();
                            that.togglePagination();
                        });
                        that.togglePagination();
                    } else if (that.options.exportDataType === 'selected') {
                        var data = that.getData(),
                            selectedData = that.getSelections();
                        if (!selectedData.length) {
                            return;
                        }

                        if (that.options.sidePagination === 'server') {
                            var dataServer = {total: that.options.totalRows};
                            dataServer[that.options.dataField] = data;
                            data = dataServer;
                            var selectedDataServer = {total: selectedData.length};
                            selectedDataServer[that.options.dataField] = selectedData;
                            selectedData = selectedDataServer;
                        }

                        that.load(selectedData);
                        if (stateField) {
                            that.hideColumn(stateField);
                        }
                        doExport();
                        that.load(data);
                    } else {
                        if (stateField) {
                            that.hideColumn(stateField);
                        }
                        doExport();
                    }
                    if (stateField) {
                        that.showColumn(stateField);
                    }
                });
            }
        }
    };
})(jQuery);

/*
* bootstrap-table - v1.12.1 - 2018-03-12
* https://github.com/wenzhixin/bootstrap-table
* Copyright (c) 2018 zhixin wen
* Licensed MIT License
*/
!function(a){"use strict";a.fn.bootstrapTable.locales["nb-NO"]={formatLoadingMessage:function(){return"Oppdaterer, vennligst vent..."},formatRecordsPerPage:function(a){return a+" poster pr side"},formatShowingRows:function(a,b,c){return"Viser "+a+" til "+b+" av "+c+" rekker"},formatSearch:function(){return"Søk"},formatNoMatches:function(){return"Ingen poster funnet"},formatRefresh:function(){return"Oppdater"},formatToggle:function(){return"Endre"},formatColumns:function(){return"Kolonner"}},a.extend(a.fn.bootstrapTable.defaults,a.fn.bootstrapTable.locales["nb-NO"])}(jQuery);